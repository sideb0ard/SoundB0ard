# key A# -- [10, 12, 14, 15, 17, 19, 21, 22]
# [22, 24, 26, 27, 29, 31, 33, 34] [34, 36, 38, 39, 41, 43, 45, 46]

let bt = rand_beat();
# load_preset(bd, "glotch")
# glotch
let ntx0 = [22, 26, 29];
let ntx1 = [27, 22, 17];
let ntx2 = [43, 12, 46];
let ntz = [ntx0, ntx1, ntx0, ntx2];
let nx = 0;
let nnx = 0;


let lbd = sample(bd/lm1-kick.aif);
let ldb = sample(bd/808Kkick.wav);
let tbd = sample(TT-ROYALHOUSE/beet.wav);

let hdsd = sample(sd/hdSD.wav);
# let dbrs = loop(dub/dubLOOPsnrsz.aiff);

let bstepblah_gen = gen()
{
  setup()
  {
    let sx = 0;
    let ix = 0;
    let imx = 3;

    let dr = 100;

    let kickdrumz = [lbd, ldb];
    let kx = 0;
  }
  run()
  {
    if (count % 16 < 14) {
      set dbrs:poffset = 0;
      for (i = 0; i < 16; ++i) {
        if (bt[i] == 1) {
          note_on_at(bd, ntz[nnx][nx], i * pp, dur = dr);
          nx = incr(nx, 0, len(ntz));
          set dbrs:pidx 0 at=i*pp;
          set maw8:pidx 0 at=i*pp;

          if (i == 0 || i == 8 || i == 10) {
            note_on_at(kickdrumz[kx], 1, i * pp, dur = dr);
            dr = dr + 50;
            if (dr > 400) {
              dr = 100;
            }
          }
        }
      }
    }

    if (count % 8 == 0) {
      bt = rand_beat();
      kx = incr(kx, 0, len(kickdrumz));
      nnx = incr(nnx, 0, len(ntz));
    }

    if (count % 7 < 5) {
      cbeat(hdsd);
    }
  }
}

# dx2 - perk1; // swuuush // RANDCORPz
# let hhb = loop(JUNALGOGZ/hipbeat.wav); set hhb:len 2
let melblah_gen = gen()
{
  setup()
  {
    let bjz = [3, 7, 11];
    let bx = 0;
    let beat = bjork(bjz[bx], 16);
    let drz = [100, 250, 600, 900];
    let drx = 0;
  }
  run()
  {
    set hhb:poffset 0;
    if (count % 8 ==0) {
      beat = bjork(bjz[bx], 16);
      bx = incr(bx, 0, len(bjz));
    }

    if (count % 3 == 0) {
      set hhb:stutter 1;
    }
    if (count % 15 == 0) {
      set hhb:reverse 1;
    }

    if (count % 8 < 6) {
      let mel = combinor(beat, ntz[nnx]);
      for (i = 0; i < 16; ++i) {
        if (mel[i] > 0) {
          #note_on_at(per1, mel[i], i * pp);
          note_on_at(dx2, mel[i], i * pp, dur = drz[drx]);
          drx = incr(drx, 0, len(drz));
          set hhb:pidx i at=i*pp;
        }
      }
    }
  }
}

let che = sample(TT-ROYALHOUSE/che.wav);
let chew = sample(voices/yo.wav);
let agh = sample(brandyvocalz/ah2.wav);
let shm = sample(matr/shm.wav);

let its = sample(aaassembly/itsSuicideVoice.wav);
# set its:pitch 0.7 ; send(0, its, 0.8); send(2, its, 0.5);

let topblah_gen = gen()
{
  setup()
  {
    let bt = rand_array(16, 0, 6);
    let sampz = [chew, shm, agh];
    let dr = 10;
    let vdr = 200;
  }
  run()
  {
    if (count % 4 < 2) {
      for (i = 0; i < 16; ++i) {
        if (bt[i] < len(sampz)) {
          note_on_at(sampz[bt[i]], 1, i * pp, dur = dr);
          dr = dr  + 10;
          if (dr > 200) {
            dr = 10;
          }
        }
      }
    }
    if (count % 5 == 0) {
      bt = rand_array(16, 0, 6);
      note_on(its, 1, dur = vdr);
      vdr = vdr + 200;
      if (vdr > 1500) {
        vdr = 200;
      }
    }
  }
}

# per2 = NUURF
let fblah_gen = gen()
{
  setup()
  {
    let bs = combinor(bassgen(),[27,24, 31]);
    let ix = 0;
    let imx = 3;
    let dr = 100;
  }
  run()
  {

    if (count % 6 < 5) {
      for (i = 0; i < 16; ++i) {
        stepper(per2, bs, ix, i, dr);
        ix = incr(ix, 0, imx);
      }
      imx = incr(imx, 3, 16);

      if (count % 16 == 0) {
        bs = combinor(bassgen(),[27,24]);
      }

      dr = dr + 50;
      if (dr > 550) {
        dr = 100;
      }
    }
  }
}

