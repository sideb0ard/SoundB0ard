# key F#  [30, 32, 34, 35, 37, 39, 41, 42] [42, 44, 46, 47, 49, 51, 53, 54]
# per2 BLELL // per1 wllopa
# per2 cwy DUUSRTY  // per1 BONG0
# per2 GHOSTXZ // per1 BONG0
# load_preset(per2, "GHOSTXZ"); load_preset(per1, "BONG0"); load_preset(bd, "FWUMPE");


# let cb = loop(dloops/NeedleClickBeatJump.aiff);


let bt = bjork(5, 16);

let d00blah_gen = gen()
{
  setup()
  {
    let mel = [35, 0, 35, 0, 44, 42, 0, 0, 32, 30, 0, 0, 34, 34, 0, 35];
    let sq = sseq(mel);
    let countz = [1, 2, 3, 4, 5, 6, 7, 9];
    let cx = 0;
    let v = 10;
    let swg = 220;
    let dr = 600;
    let bce = 1;
  }
  run()
  {
    if (count % 4 == 2) {
      set sq:count_by countz[cx];
      cx = incr(cx, 0, len(countz));
      let lastnote = 0;
      for (i = 0; i < 16; ++i) {
        if (!is_in(bt, i)) {
          let offset = 0;
          if (i % 2 == 1) {
            offset = swg;
          }
          let n = stepn(sq);
          let on_at = i * pp + offset;
          if (n > 0) {
            lastnote = n ;
            if (count % 4 == 3) {
              lastnote = n + 12;
            }
            note_on_at(per1, n, on_at, vel = v, dur = dr);
          } else {
            if (count % 2 == 1) {
              note_on_at(per2, lastnote, on_at, vel = 100 - v, dur = dr);
            }
          }
          v = v + 10;
          if (v > 100) {
            v = 10;
          }

          dr = dr + 30;
          if (dr > 600) {
            dr = 100;
          }
        }
      }
    }
    # if (count % 3 == 0) {
      #   set sq:bounce bce;
      #   bce = 1 - bce;
      # }
  }
}

# bd = LICTRx
# load_preset(bd, "LICTRx")
# p4 < osc 4 "0.4 1"  "set bd:eg_sustain %"
let bbblah_gen = gen()
{
  setup()
  {
    let btz = [1, 3, 5, 7];
    let bx = 0;
    let dc = 10;
    let d= 100;
    let v = 127;
  }
  run()
  {
    if (count % 2 == 0) {
      bt = bjork(btz[bx], 16);
      bx = incr(bx, 0, len(btz));
    }
    for (i = 0; i < 16; ++i) {
      if (bt[i] == 1) {
        note_on_at(bd, 27, i * pp, vel = v);
      }
    }
  }
}

# let cliip = loop(glitchedVinyl/clipsnysppy.wav);

let cblah_gen = gen()
{
  setup()
  {
    let lenz = [2, 4, 8, 11];
    let lx = 0;
  }
  run()
  {
    set cliip:len lenz[lx];
    lx = incr(lx, 0, len(lenz));
    if (count % 3 == 0) {
      set cliip:stutter 1;
    }
    if (count % 15 == 0) {
      set cliip:reverse 1;
    }
  }
}

# let mel = loop(glitchedVinyl/MELODY.wav); set mel:len 4
# add_fx(mel, "sidechain", bd);

# let sump = loop(glitchedVinyl/summerwuthpierre.wav); set sump:len 2;

let glimblah_gen = gen()
{
  setup()
  {
    let mxz = [1, 2, 0.5, 2, 1];
    let mx = 0;
  }
  run()
  {
    set mel:pitch mxz[mx];
    mx = incr(mx, 0, len(mxz));

    if (count % 2 == 0) {
      set sump:stutter 1;
    }
    if (count % 4 == 0) {
      set mel:scramble 1;
    }
    if (count % 7 == 0) {
      set mel:stutter 1;
    }
    if (count % 8 == 6) {
      set mel:reverse 1;
    }
  }
}


let glia1 = sample(GliaWassadek/glia-wassadek-35-.-.-.wav);
let glia3 = sample(GliaWassadek/glia-wassadek-44-.-.-.wav);
let gliaz = [glia1, glia3];
let gblah_gen = gen()
{
  setup()
  {
    let ixr = 0;
    let ixm = 1;
    let rhm = rand_array(16, 0, 1);
  }
  run()
  {
    for (i = 0; i < 16; ++i) {
      if (rhm[i] == 1) {
        note_on_at(gliaz[ixr], 1, i * pp);
        ixr = incr(ixr, 0, ixm);
      }
    }
    if (count % 8 == 7) {
      ixm = incr(ixm, 1, len(gliaz));
    }
  }
}

let ppblah_gen = gen()
{
  setup()
  {
    let percp = rand_array(16, 0, 6);
    let percz = [cb, cl, cp];
    let px = 0;
    let fz = [18, 30, 42];
    let fx = 0;
    let chrz = [18, 23, 25];
    let cx =0;
  }
  run()
  {
    let chrdroot = chrz[cx];
    if (count % 3 == 0) {
      chrdroot = chrdroot + 12;
    }
    let ntz = notes_in_chord(chrdroot);
    print(ntz);
    for (i = 0; i < 16; ++i) {
      if (percp[i] < len(percz)) {
        if (!is_in(bt, i)) {
          note_on_at(percz[px], ntz[px], i * pp);
          px = incr(px, 0, len(percz));
        }
      }
    }

    if (count % 8 == 0) {
      percp = rand_array(16, 0, 6);
      fx = incr(fx, 0, len(fz));
      cx = incr(cx, 0, len(chrz));
    }
  }
}

