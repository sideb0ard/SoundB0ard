# bpm 100; let del = loop(dloops2/deilla.wav); set del:len 2;  p1 $ voicblah_gen
# load_preset(per1, "GHOSTXZ"); p3 $ counterblah_gen

# p2 $ bassblah_gen

#   h h w h h h w h  h  w   h   h   h   w   h
# 0 1 2 4 5 6 7 9 10 11 13  14  15  16  18  19
# 0 1 2 3 4 5 6 7 8  9  10  11  12  13  14  15
# scale_melody


let sclaeblah_fn = fn(root, num)
{
  num = num % 15;

  if (num < 3) {
    return root + num;
  }
  if (num < 7) {
    return root + num + 1;
  }
  if (num < 10) {
    return root + num + 2;
  }
  if (num < 14) {
    return root + num + 3;
  }
  return root + num + 4;
}

let counterblah_gen = gen()
{
  setup()
  {
    let rif = [22, 0, 22, 24, 0, 36, 0, 24, 0, 0, 0, 29, 0, 41, 0, 0];
    let swng = 20;
    let cnt = 1;
  }
  run()
  {
    if (count % 2 == 1) {
      ++cnt;
      let rf = rif;
      if (cnt % 8 == 7) {
        rf = reverse(rf);
      }
      if (cnt % 6 == 0) {
        rf = stutter(rf);
      }
      for (i = 0; i < 16; ++i) {
        let offs = swng;
        if (i % 2 == 1) {
          offs = 0;
        }
        if (rf[i] > 0) {
          note_on_at(per1, rf[i], i * pp + offs);
        }
      }
    }
  }
}


let jist = sample(voices/ceecee.wav);
let jam = sample(voices/jamhot.wav);

# let whatsup = loop(loops2/whatsup.wav); set whatsup:vol 0 at=3840; vol del 0;
# let tlc = loop(dloops2/TLC.wav); p2 $ beatblah_gen; vol del 1;
let wwwblah_gen = gen()
{
  setup()
  {
    vol whatsup 0;
  }
  run()
  {
    vol whatsup 0;

    if (count % 8 == 7) {
      vol whatsup 1;
      set whatsup:stutter 1;
    }
    if (count % 4 == 2) {
      set tlc:stutter 1;
    }
  }
}

let beatblah_gen = gen()
{
  setup()
  {
  }
  run()
  {
    if (count % 8 == 7) {
      mashup([tlc, del]);
    }
    if (count % 16 == 3) {
      set del:stutter 1;
    }
    if (count % 16 == 8) {
      set tlc:stutter 1;
      set del:reverse 1;
    }
  }
}

# dx = lrrt // elellelele // darth // ptnchnn
# p6 $ dxblah_gen
let dxblah_gen = gen()
{
  setup()
  {
    let d = 80;
    let swng = 20;
  }
  run()
  {
    if (count % 8 > 4) {
      for (i = 0; i < 16; ++i) {
        let offs = swng;
        if (i % 2 == 1) {
          if (i % 4 == 1) {
            offs = 0;
          }
          note_on_at(dx2, 24, i * pp + offs, dur = d);
        }
      }
      d = d + 10;
      if (d > 120) {
        d = 80;
      }
    }
    if (count % 4 == 0) {
      set tlc:stutter 1;
    }
  }
}

let djpl = sample(voices/DJPLZ.wav);
let voicblah_gen = gen()
{
  setup()
  {
    let dr = 800;
  }
  run()
  {
    if (count % 8 == 7) {
      note_on_at(jist, 1, 4 * pp, dur = dr);
    }
    if (count % 16 == 0) {
      #note_on_at(jam, 1, 8 * pp, dur = dr);
      note_on_at(djpl, 1, 8 * pp, dur = dr);
    }
    dr = dr + 100;
    if (dr > 2600) {
      dr = 800;
    }
  }
}


#let base_key = 13;
let base_key = 25;
# load_preset(dx, "fnord0");

# dx = fnord0 // tigerking // fnc // ETZ // ZILLAx
# WARSND // FWUMPE // SNDCLNR // WHIRZ

let StepDatPattern = fn(pat, base_key, range_of_melody)
{
  let nots = notes_in_chord(base_key);
  if (count % 4 == 3) {
    nots = notes_in_chord(base_key + 7);
  }
  if (count % 16 == 15) {
    nots[1] = nots[1] + 12;
    nots[2] = nots[2] + 12;
  }
  let cur_val = 1;
  for (i = 0; i < len(pat); ++i) {
    if (pat[i] == 1) {
      let nt = nots[cur_val];
      cur_val= incr(cur_val, 1, len(nots));
      if (i % 4 == 0) {
        nt = nots[0];
      }
      pat[i] = nt;
    }
  }
  return pat;
}

let chz = [1, 3, 2, 4];
let GenMellerdy = fn(length_of_melody, base_key, range_of_melody)
{
  #let third_of_melody = length_of_melody / 3;
  #let len_section_one = 2 * third_of_melody;
  #let len_section_two = (length_of_melody - len_section_one) / 2;
  #let len_section_three = (length_of_melody - len_section_one) - len_section_two;

  let len_section_one = length_of_melody  / 2;
  let len_section_two = (length_of_melody - len_section_one) / 2;
  let len_section_three = (length_of_melody - len_section_one) - len_section_two;

  let steps_section_one = chz[rand(len(chz))];
  let section_one = bjork(steps_section_one, len_section_one);

  section_one = StepDatPattern(section_one, base_key, range_of_melody);

  let steps_section_two_one = chz[rand(len(chz))];
  let section_two_one = bjork(steps_section_two_one, len_section_two);
  section_two_one = StepDatPattern(section_two_one, base_key, range_of_melody);
  let steps_section_two_two = chz[rand(len(chz))];
  let section_two_two = bjork(steps_section_two_two, len_section_three);
  section_two_two = StepDatPattern(section_two_two, base_key, range_of_melody);

  return section_one + section_two_one + section_two_two;

}

let jam = sample(voices/jamhot.wav);
let melblah_gen = gen()
{
  setup()
  {
    #let base_key = 13;
    #let base_key = 14;
    let num_nots = 2;
    let mel1 = GenMellerdy(64, base_key, num_nots);
    let d = 150;
    let djam = 1350;
    let swg = 10;
    let ntct = 0;
  }
  run()
  {
    if (count % 4 == 0) {
      mel1 = GenMellerdy(64, base_key, num_nots);
      #set deilla:stutter 1;

      num_nots = incr(num_nots, 1, 3);
    }

    if (count % 8 < 5) {
      let pp = 3840 / len(mel1);
      for (i = 0; i < len(mel1); ++i) {
        let v = 100 + rand(27);
        let offs = swg;
        if (i % 2 == 0) {
          offs = 0;
        }
        if (i % 4 == 1) {
          v = 127;
        }
        if (mel1[i] > 0) {
          note_on_at(dx, mel1[i], i * pp + offs, dur = d, vel = v);
        }
      }
      d = d + 50;
      if (d > 350) {
        d = 150;
      }
    } else {
      note_on_at(jam, 1, 12 * pp, dur = djam);
      djam = djam + 550;
      if (djam > 3000) {
        djam = 500;
      }
    }
  }
}

# bpm 96

# let ara = loop(dloops2/aradisbeatiuz.wav); vol del 0; p4 $ ""
# add_buf(ara, "dloops2/startingwit.wav"); set ara:0:play_for 3; set ara:0:next_action 2

let da2blah_gen = gen()
{
  setup()
  {
  }
  run()
  {
    if (count % 4 == 3) {
      set ara:scramble 1;
      solo(ara, at=14*pp);
    }
    if (count % 8 == 7) {
      set ara:stutter 1;
      solo(ara, at=14*pp);
    }
    #set itg:stutter 1;
  }
}

# dx2 -= wurrop // skirissh // rSQer // quazzz // tigerking // timeLLy
# load_preset(dx2, "MWAUR"); p3 $ CompMel; p2 $ da2blah_gen
let CompMel= gen()
{
  setup()
  {
    #let beat = rand_beat() * 2;
    let beat = rotate(rand_beat(), 2);
    # let mel = StepDatPattern(beat, base_key, 4);
    let notz = notes_in_chord(base_key, 3);
    let nx = 1;
    let d = 140;
  }
  run()
  {
    # 5
    if (count % 8 > 4)  {
      for (i = 0; i < 16; ++i) {
        if (beat[i] == 1) {
          let n = notz[nx];
          nx = incr(nx, 1, len(notz));
          if (i % 2 == 4) {
            n = notz[0];
          }
          if (rand(100) > 80) {
            n = n + 12;
          }
          note_on_at(dx2, n, i * pp, dur = d);
        }
      }
      if (count % 8 == 0) {
        beat = rotate(rand_beat(), 2);
      }
    }
    d = d + 40;
    if (d > 250) {
      d = 50;
    }
  }
}

let StepDatMel = fn(num_hits, base_key, direction)
{
  let notz = notes_in_chord(base_key, 1, 1);
  let mel = rand_array(16, 0, 0);
  let sixtz = sort(rand_sixteenthz(num_hits));
  let idx = 0;
  for (i = 0; i < num_hits; ++i) {
    mel[sixtz[i]] = notz[idx];
    if (direction > 1) {
      idx = rincr(idx, 0, len(notz));
    } else {
      idx = incr(idx, 0, len(notz));
    }
  }
  return mel;
}

# let itg = loop(dloops2/itgo.wav); vol ara 0; p7 $ ""

# p3 $ counterblah_gen ; vol itg 0

# load_preset(dx, "magicpiano"); p6 $ riffblah_gen
# vol itg 1; vol tlc 1
let riffblah_gen = gen()
{
  setup()
  {
    let rf = [0, 24, 22, 0, 0, 0, 31, 0, 0, 0, 29, 0, 32, 0, 24, 0];
    let rf2 = [0, 0, 24, 0, 0, 31, 31, 0, 0, 0, 0, 0, 32, 0, 24, 0];
  }
  run()
  {
    if (count % 2 == 0) {
      for (i = 0; i < 16; ++i) {
        if (rf[i] > 0) {
          note_on_at(dx, rf[i], i * pp);
        }
      }
    }
  }
}

let bassblah_gen = gen()
{
  setup()
  {
    let d = 70;
  }
  run()
  {
    if (count % 2 == 0) {
      for (i = 0; i < 16; ++i) {
        if (i % 2 == 1) {
          note_on_at(dx, 24, i * pp, dur = d);
        }
      }
      d = d + 10;
      if (d > 160) {
        d = 70;
      }
    }
  }
}

# per1 = electrHH
# per2 = WOMPPP
let numblah_gen = gen()
{
  setup()
  {
    let key = 24;
    # minor
    let key_type = 1;
    let num_numz = 0;
    let num_hitz = 3;
    let idx1 = 0;
    let idx2 = 15;
    let idxz = rand_array(16, 0, 0);
    let swng = 190;
  }
  run()
  {
    if (count % 3 == 0) {
      num_hitz = incr(num_hitz, 3, 11);
    }
    let dr = 3840 / num_hitz / 3;

    if (count % 8 < 6) {
      for (i = 0; i < 16; ++i) {
        if (i % num_hitz == 0) {
          let offset = swng;
          if (i % 2 == 0) {
            offset = 0;
          }
          note_on_at(per2, sclaeblah_fn(key, idxz[i] - 12), i * pp + offset, dur = dr);
          idxz[i] = incr(idxz[i], 0, 14);idxz[i] + i;
        } else {
          if (count % 4 < 2) {
            note_on_at(per1, sclaeblah_fn(key, idxz[i]), i * pp + offset, dur = dr);
          }
        }
        if (i%2 == 0) {
          idxz[i] = idxz[i] - 1;
        }
      }
    }
  }
}

