# key f - 17, 29, 41, 53, 65, 77

let key = 27;

# [29, 31, 33, 34, 36, 38, 40, 41]
# vi-ii-V-I [38, 41, 45] [31, 34, 38] [36, 40, 43] [29, 33, 36]

# let chrdz = [ [38, 41, 45], [31, 34, 38], [36, 40, 43], [29, 33, 36] ];
# let chrdz = [ [38, 45], [34, 38], [43], [29, 36] ];
let ntz_in_key = notes_in_key(key);
let chrdz = [ notes_in_chord(key), notes_in_chord(ntz_in_key[3]), notes_in_chord(ntz_in_key[4])];
let crx = 0;
let ntx = 0;

let beat = rand_beat();

let chordblah_gen = gen()
{
  setup()
  {
  }
  run()
  {
    if (count % 4 == 0) {
      crx = incr(crx, 0, len(chrdz));
    }
  }
}

# let vrv = loop(JUNALGOGZ/VIBErev.wav); set vrv:len 4;
# let nots = loop(voices/notstayinghome.wav); set nots:len 2; p6 $ vblah_gen
let vblah_gen = gen()
{
  setup()
  {
  }
  run()
  {

    unsolo();
    if (count % 2 == 0) {
      set vrv:scramble 1;
      set nots:stutter 1;
    }
    if (count % 4 == 3) {
      set vrv:reverse 1;
      vol nots 0;
    }
    if (count % 6 == 0) {
      vol vrv 1;
    }
    if (count % 8 == 7) {
      solo(vrv, at=14*pp);
      vol vrv 0 at = 16*pp;
    }
  }
}
# dx -  default // per2 wururrrp Srqttx
# dx wururrrp // M00n
# let snp = loop(Riser77/snipHop.wav); set snp:len 2; p4 $ dxxxblah_gen
let dxxxblah_gen = gen()
{
  setup()
  {
    let ix = 0;
    let mxx = 3;
    let dr = 100;
  }
  run()
  {
    let ch = down(chrdz[crx], 12);
    let be = combinor(beat, ch);
    if (count % 8 < 6) {
      for (i = 0; i < 16; ++i) {
        if (stepper(dx, down(be,12), ix, i, dr)) {
        } else {
          if (i > 8) {
            note_on_at(per2, ch, i * pp, dur = dr);
          }
        }
        ix = incr(ix, 0, mxx);
        dr = dr + 10;
        if (dr > 400) {
          dr = 77;
        }
      }
    }
    mxx = incr(mxx, 2, 16);
    if (count % 3 == 0) {
      set snp:stutter 1;
    }
  }
}

# let iget = loop(aaassembly/iegtMAD.wav); vol iget 0;
# let yoyo = loop(aaassembly/yoyoredman.wav); vol yoyo 0;
# p3 $ kkbelah_gen

let kkbelah_gen = gen()
{
  setup()
  {
  }
  run()
  {
    if (count % 4 == 0) {
      set iget:vol 1;
      set snp:vol 1;
      set yoyo:vol 1;
      set snp:stutter 1;
      set iget:stutter 1;
    }
    if (count % 6 == 0) {
      set snp:scramble 1;
    }
    if (count % 8 == 0) {
      mashup([snp, yoyo, iget, dx]);
    }
    if (count % 16 == 15) {
      set snp:reverse 1;
    }
    if (count % 6 == 5) {
      set yoyo:vol 0;
    }
    if (count % 7 == 5) {
      set iget:vol 0;
    }
  }
}


# let bszz = sample(bombz/BSQ_BASSDROP.wav); p5 $ bsslah_gen
let bsslah_gen = gen()
{
  setup()
  {
  }
  run()
  {
    if (count % 16 == 0) {
      solo(bszz);
      note_on_at(bszz, 1, 0, dur= 5000);
    }
  }
}

let melblah_gen = gen()
{
  setup()
  {
    let idx = 0;
    let beat = rand_beat();
    let d = 50;
  }
  run()
  {
    if (count % 2 == 0) {
      let c = chrdz[crx];
      for (i = 0; i < 16; ++i) {
        if (beat[i] == 1) {
          note_on_at(mo, c[idx]+12, i * pp, d);
          idx = incr(idx, 0, len(c));
          d = d + 50;
          if (d > 500) {
            d = 50;
          }
        }
      }
    }
    if (count % 8 == 0) {
      beat = rand_beat();
    }
  }
}

