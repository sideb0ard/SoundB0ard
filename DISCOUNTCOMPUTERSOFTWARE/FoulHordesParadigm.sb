# key f - 17, 29, 41, 53, 65, 77

let key = 25;

# [29, 31, 33, 34, 36, 38, 40, 41]
# vi-ii-V-I [38, 41, 45] [31, 34, 38] [36, 40, 43] [29, 33, 36]

# bpm 160; load_preset(dx, "wahaio"); load_preset(per3, "PHRANK");
# p3 $ dxxxblah_gen; p4 $ melblah_gen

#let bx = loop(dloops/brandyxmen2bar1.aif); set bx:len 2; p2 $ wblah_gen;

#let sal = loop(dloops/sadLIB.aiff);
#let krs = loop(dloops/krushSnareRoll.aiff); p5 $ drumblah_gen

let wblah_gen = gen()
{
  setup() {
    let ptz = [0.8, 0.7, 1.5, 1.2, 1.5, 1];
    let px = 0;
  }
  run()
  {
    if (count % 8 == 7) {
      set bx:scramble 1;
    }
    if (count % 4 == 0) {
      set bx:pitch ptz[px];
      px = incr(px, 0, len(ptz));
    }
    if (count % 16 == 15) {
      set bx:reverse 1;
      solo(bx, at=10*pp);
    }
    if (count % 4 == 0) {
      set bx:stutter 1;
      #mashup([bx, krs, sal]);
    }
  }
}


# let vrv = loop(JUNALGOGZ/VIBErev.wav); set vrv:len 4;
#let nots = loop(voices/notstayinghome.wav); set nots:len 2; p6 $ vblah_gen; solo(nots);
let vblah_gen = gen()
{
  setup()
  {
  }
  run()
  {

    unsolo();
    if (count % 2 == 0) {
      set vrv:scramble 1;
      set nots:stutter 1;
    }
    if (count % 4 == 3) {
      set vrv:reverse 1;
      vol nots 0;
    }
    if (count % 4 == 0) {
      #mashup([vrv, sal, iget]);
    }
    if (count % 6 == 0) {
      vol vrv 1;
      vol nots 1;
    }
    if (count % 8 == 7) {
      solo(vrv, at=14*pp);
      vol vrv 0 at = 16*pp;
    }
  }
}
#load_preset(dx, "garage"); // halien // bassTFumpoctMin1 // ETZ // wahaio
let dxxxblah_gen = gen()
{
  setup()
  {
    let ix = 0;
    let mxx = 3;
    let dr = 100;
    let beat = rand_beat();

  }
  run()
  {
    let ch = notes_in_chord(key, 1);
    let be = combinor(beat, ch);
    if (count % 8 < 6) {
      for (i = 0; i < 16; ++i) {
        stepper(dx, down(be,12),  ix, i, dr);
        ix = incr(ix, 0, mxx);
        dr = dr + 10;
        if (dr > 400) {
          dr = 77;
        }
      }
    }
    mxx = incr(mxx, 2, 16);
    if (count % 16 == 0) {
      beat = rand_beat();
    }
  }
}

# let iget = loop(aaassembly/iegtMAD.wav); vol iget 0;
# let yoyo = loop(aaassembly/yoyoredman.wav); vol yoyo 0;
# p4 $ kkbelah_gen

let kkbelah_gen = gen()
{
  setup()
  {
  }
  run()
  {
    if (count % 8 == 0) {
      set iget:vol 1;
      set yoyo:vol 1;
      set iget:stutter 1;
      #set hsl:scramble 1;
    }
    if (count % 4 == 0) {
      mashup([yoyo, iget, dx]);
    }
    if (count % 6 == 5) {
      set yoyo:vol 0;
    }
    if (count % 2 == 0) {
      set yoyo:stutter 1;
      set iget:scramble 1;
    }
    if (count % 7 == 5) {
      set iget:vol 0;
    }
  }
}


# mo = swqSAW or sandepp Esgr
let melblah_gen = gen()
{
  setup()
  {
    let beat = rand_beat();
    #let mel = combinor(beat, notes_in_chord(key+12, 1));
    let offs = 0;
    let mel = combinor(beat, up(notes_in_chord(key, 1), offs));
    let ix = 0;
    let mix = 3;
    let d = 50;
  }
  run()
  {
    if (count % 8 < 5) {
      for (i = 0; i < 16; ++i) {
        #stepper(mo, mel, ix, i, d);
        stepper(per3, mel, ix, i, d);
        ix = incr(ix, 0, mix);
        d = d + 10;
      }
      if (d > 200) {
        d = 10;
      }
    }
    mix = incr(mix, 3, 16);
    if (count % 16 == 0) {
      if (offs == 0) {
        offs = 12;
      } else {
        offs = 0;
      }
    }
    if (count % 8 == 0) {
      beat = rand_beat();
      #mel = combinor(beat, notes_in_chord(key+12, 1));
      mel = combinor(beat, up(notes_in_chord(key, 1), offs));
    }

  }
}

let drumblah_gen = gen()
{
  setup()
  {
    let snon = 1;
  }
  run()
  {
    if (count % 4 == 0) {
      #set sal:vol 1;
    }
    if (count % 4 == 3) {
      set sal:stutter 1;
      set krs:reverse 1;
    }
    if (count % 8 == 5) {
      #set sal:vol 0;
    }
    if (count % 8 == 7) {
      #mashup([sal, krs, dx, mo]);
      snon = 1 - snon;
      set krs:vol snon;
    }
  }
}

let wnah_gen = gen()
{
  setup()
  {
  }
  run()
  {
    if (count % 4 == 0) {
      set sql:scramble 1;
    }
    if (count % 3 == 0) {
      set wnk:stutter 1;
    }
    if (count % 8 == 7) {
      set wnk:reverse 1;
      set wnk:sql 1;
    }
  }
}

