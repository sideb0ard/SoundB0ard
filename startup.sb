let shiko = [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0];
let son = [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0];
let rumba = [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0];
let soukous = [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0];
let gahu = [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0];
let bossa = [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0];

let rhythms_int = [ shiko, son, rumba, soukous, gahu, bossa, bjork(3, 16), bjork(7, 16), bjork(5, 16), bjork(11, 16) ];

let briff = fn(root)
{
  #print("VALLEYNOTES:", valid_notes);
  let beat = bjork(rand(9) + 2, 16);
  #let beat = rand_array(16, 0, 1);
  for ( i = 0; i < 16; ++i) {
    if (beat[i] == 1) {
      beat[i] = root;
    }
  }
  return beat;
}


let riff = fn(root)
{
  #print("VALLEYNOTES:", valid_notes);
  let beat = bjork(rand(9) + 2, 16);
  #let beat = rand_array(16, 0, 1);
  for ( i = 0; i < 16; ++i) {
    if (beat[i] == 1) {
      beat[i] = root;
    }
  }
  return beat;
}

let key_riff = fn(root)
{
  let valid_notes = notes_in_key(root);
  #print("VALLEYNOTES:", valid_notes);
  let beat = bjork(rand(9) + 2, 16);
  #let beat = rand_array(16, 0, 1);
  for ( i = 0; i < 16; ++i) {
    if (beat[i] == 1) {
      beat[i] = valid_notes[rand(len(valid_notes))];
    }
  }
  return beat;
}

let chord_riff = fn(notes)
{
  #print("VALLEYNOTES:", valid_notes);
  let beat = bjork(rand(9) + 2, 16);
  #let beat = rand_array(16, 0, 1);
  for ( i = 0; i < 16; ++i) {
    if (beat[i] == 1) {
      beat[i] = notes[rand(len(notes))];
    }
  }
  return beat;
}

let map = fn(arrray, fooonction)
{
  let mapduh = [];
  for (i = 0; i < len(arrray); ++i)
  {
    if (arrray[i] ) {
      mapduh = push(mapduh, fooonction(arrray[i]));
    } else {
      mapduh = push(mapduh, ~);
    }
  }
  return mapduh;
}

let rand_beat = gen()
{
  setup() {}

  run() {
    let idx = rand(len(rhythms_int))
      #puts("IDX is ", idx, " - pattern is: ", rhythms_int[idx])
      return rhythms_int[idx]
  }
}

let count = 0;

let countr = gen()
{
  setup() {}
  run()
  {
    ++count;
  }
}

p0 # countr ;

# i.e. 3840 / 16 == 240 midi Pulses Per 16th
let pp = 240;

let up = fn(array_val, halfstep)
{
  return map(array_val, fn(v) { if (v > 0) { return v + halfstep; } else { return v;}  });
}

let down = fn(array_val, halfstep)
{
  return map(array_val, fn(v) { if (v > 0) { return v - halfstep; } else { return v;}  });
}

let combinorCh = fn(rhythm, chord)
{
  let return_melody= [];
  for (i=0; i < len(rhythm); ++i)
  {
    if (type(rhythm[i]) == "ARRAY") {
      return_melody = push(return_melody, combinorCh(rhythm[i], melody));
    }
    else {
      if (rhythm[i] > 0) {
        return_melody = push(return_melody, chord);
      } else {
        return_melody = push(return_melody, 0);
      }
    }
  }
  return return_melody;
}


let combinor = fn(rhythm, melody)
{
  let return_melody= [];
  let mel_idx = 0;
  for (i=0; i < len(rhythm); ++i)
  {
    if (type(rhythm[i]) == "ARRAY") {
      return_melody = push(return_melody, combinor(rhythm[i], melody));
    }
    else {
      if (rhythm[i] > 0) {
        return_melody = push(return_melody, melody[mel_idx]);
        if (rand(10) > 7) {
          mel_idx = incr(mel_idx, 0, len(melody));
        }
      } else {
        return_melody = push(return_melody, 0);
      }
    }
  }
  return return_melody;
}
let rcombinor = fn(rhythm, melody)
{
  let return_melody= [];
  for (i=0; i < len(rhythm); ++i)
  {
    if (type(rhythm[i]) == "ARRAY") {
      return_melody = push(return_melody, rcombinor(rhythm[i], melody));
    }
    else {
      if (rhythm[i] > 0) {
        return_melody = push(return_melody, melody[rand(len(melody))]);
      } else {
        return_melody = push(return_melody, 0);
      }
    }
  }
  return return_melody;
}

let phasefn = fn(soundgen1, soundgen2, pat_array, sg2_px, carry, bars_to_phase_over, note_dur)
{
  let pp = 3840 / len(pat_array);
  let qpp = (3840* bars_to_phase_over) / (len(pat_array) * bars_to_phase_over + 1);

  # normal time
  for (i = 0; i < len(pat_array); ++i) {
    #print("sg:", soundgen1, "I:", pat_array[i], " dru:" ,note_dur, " pp:", pp);
    note_on_at(soundgen1, pat_array[i], i * pp, dur=note_dur);
  }

  # phased time
  for (i = 0; i < len(pat_array); ++i ) {
    let time_at = i * qpp + carry;
    note_on_at(soundgen2, pat_array[sg2_px], time_at, dur=note_dur);
    sg2_px = incr(sg2_px, 0, len(pat_array));
  }
  let last_idx = (len(pat_array) * qpp) + carry;
  if (last_idx < 3840) {
    note_on_at(soundgen2, pat_array[sg2_px], last_idx, dur=note_dur);
    sg2_px = incr(sg2_px, 0, len(pat_array));
    let diff = 3840 - last_idx;
    carry = qpp - diff;
  } else {
    carry = last_idx - 3840;
  }
  return [sg2_px, carry];
}

let map_to_array = fn(the_map, len_array)
{
  let the_array = [];

  for (i = 0; i < len_array; ++i) {
    if (type(the_map[i]) == "NUMBER") {
      push(the_array, the_map[i]);
    } else {
      push(the_array, 0);
    }
  }
  return the_array;
}

let is_val_in_list = fn(the_list, the_val)
{
  for (i = 0; i < len(the_list); ++i) {
    if (the_list[i] == the_val) {
      return true;
    }
  }
  return false;
}

let expand = fn(in_array)
{
  if (len(in_array) == 0 || len(in_array) > 15) {
    return in_array;
  }

  let rhythm = bjork(len(in_array), 16);
  return combinor(rhythm, in_array);
}

let list_to_array = fn(the_list, len_array)
{
  let the_array = [];
  for (i = 0; i < len_array; ++i) {
    if (is_val_in_list(the_list, i)){
      the_array = push(the_array, 1);
    } else {
      the_array = push(the_array, 0);
    }
  }
  return the_array;
}

let double = fn(list)
{
  let return_valz = list_to_array([], 16);
  if (len(list) == 16) {
    for (i = 0; i < 16; ++i) {
      if (list[i] > 0) {
        return_valz[i/2] = list[i];
        return_valz[8 + i/2] = list[i];
      }
    }
  }
  return return_valz;
}

let play_pattern = fn(sg, pat)
{
  let lenny = len(pat);
  let pp = 3840 / lenny;

  for (i = 0; i < lenny; ++i) {
    if (type(pat[i]) == "ARRAY" || (type(pat[i]) == "NUMBER" && pat[i] > 0)) {
      note_on_at(sg, pat[i], pp * i);
    }
  }
}

let gen_beat2 = fn()
{
  let ran1 = rand(8);
  let ran2 = rand(8);
  let ran3 = 16 - (ran1 + ran2);
  let beat = bjork(rand(ran1), ran1) + bjork(rand(ran2), ran2) + bjork(rand(ran3), ran3);
  beat[0] = 1;
  return beat;
}

let gen_beat = fn()
{
  let beat = bjork(rand(5)+2, 16);
  if (rand(100) > 70) {
    beat = rand_beat();
  }

  for (i = 4; i < 16; ++i) {
    if (beat[i] == 1 && rand(100) > 60) {
      beat[i] = bjork(rand(3)+3, 8);
    }
  }

  for (i = 8; i < 16; ++i) {
    if (beat[i] == 1 && rand(100) > 80) {
      beat[i] = bjork(rand(4)+2, 8);
    }
  }

  return beat;
}

let stepper = fn(sg, pat, read_idx, play_idx, d)
{
  if (type(pat[read_idx]) == "ARRAY") {
    note_on_at(sg, pat[read_idx][0], play_idx * pp);
  } else {
    if (pat[read_idx] > 0) {
      let v = 100 + rand(27);
      if (play_idx % 2 == 0) {
        v = 127;
      }
      note_on_at(sg, pat[read_idx], play_idx * pp, dur = d, vel = v);
    }
  }
}
let cstepper = fn(sg, pat, read_idx, play_idx)
{
  if (type(pat[read_idx]) == "ARRAY") {
    note_on_at(sg, notes_in_chord(pat[read_idx][0], 1, 1), play_idx * pp);
  } else {
    if (pat[read_idx] > 0) {
      note_on_at(sg, notes_in_chord(pat[read_idx], 1, 1), play_idx * pp);
    }
  }
}

let is_valid_string_mask = fn(input_mask) {
  let val_items = ["0", "1", "2", "3", "4", "5", "6", "7",
      "8", "9", "a", "b", "c", "d", "e", "f"];

  let lcmask = lowercase(input_mask);
  for (i = 0; i < len(lcmask); ++i) {
    if (!is_val_in_list(val_items, lcmask[i])) {
      return false;
    }
  }
  return true;
}

let string_to_hex = fn(char) {
  if (char == "0") {
    return [0, 0, 0, 0];
  }
  if (char == "1") {
    return [0, 0, 0, 1];
  }
  if (char == "2") {
    return [0, 0, 1, 0];
  }
  if (char == "3") {
    return [0, 0, 1, 1];
  }
  if (char == "4") {
    return [0, 1, 0, 0];
  }
  if (char == "5") {
    return [0, 1, 0, 1];
  }
  if (char == "6") {
    return [0, 1, 1, 0];
  }
  if (char == "7") {
    return [0, 1, 1, 1];
  }
  if (char == "8") {
    return [1, 0, 0, 0];
  }
  if (char == "9") {
    return [1, 0, 0, 1];
  }
  if (char == "a") {
    return [1, 0, 1, 0];
  }
  if (char == "b") {
    return [1, 0, 1, 1];
  }
  if (char == "c") {
    return [1, 1, 0, 0];
  }
  if (char == "d") {
    return [1, 1, 0, 1];
  }
  if (char == "e") {
    return [1, 1, 1, 0];
  }
  if (char == "f") {
    return [1, 1, 1, 1];
  }
  return [0, 0, 0, 0];
}


let string_to_mask = fn(string_mask) {
  let ret_mask = [];
  if (!is_valid_string_mask(string_mask)) {
    return ret_mask;
  }

  let lcmask = lowercase(string_mask);
  for (i = 0; i < len(string_mask); ++i) {
    let hx = string_to_hex(string_mask[i]);
    for (j = 0; j < 4; ++j) {
      push(ret_mask, hx[j]);
    }
  }
}

let mask = fn(original_pattern, mask_pattern)
{
  let return_pattern = [];

  let maskr = mask_pattern;
  if (type(mask_pattern) == "STRING") {
    maskr = string_to_mask(mask_pattern);
  }

  for (i = 0; i < min(len(original_pattern), len(maskr)); ++i) {
    if (maskr[i] > 0) {
      push(return_pattern, 0);
    } else {
      push(return_pattern, original_pattern[i]);
    }
  }

  return return_pattern;
}

let perky = fn(beat_pattern, sample_array)
{
  if (len(beat_pattern) == 0 || len(sample_array) == 0) {
    return;
  }

  for (i = 0; i < len(beat_pattern); ++i) {
    let v = rand(90) + 17;
    if (type(beat_pattern[i]) == "ARRAY") {
      let larr = beat_pattern[i];
      let ppp = pp / len(larr);
      for (j = 0; j < len(larr); ++j) {
        if (larr[j] > 0) {
          note_on_at(sample_array[rand(len(sample_array))], 1, i * pp + j * ppp, vel = v);
        }
      }
    } else {
      if (beat_pattern[i] > 0) {
        note_on_at(sample_array[rand(len(sample_array))], 1, i * pp, vel = v);
      }
    }
  }
}

let cbeat = fn(cp)
{
  let probz = {4:90, 6:10, 12:90, 13:5, 15:10};
  let parray = map_to_array(probz, 16);
  for (i = 0; i < 16; ++i) {
    if (parray[i] > 0 && parray[i] > rand(100)) {
      let v = 127;
      if (i > 12) {
        v = 72;
      }
      let offset = 0;
      if (i > 0) {
        offset = rand(45);
      }
      note_on_at(cp, 1, i * pp - offset, vel = v);
    }
  }
}
let dbeat = fn(bd)
{
  let probz = {0:90, 6:90, 11:50, 14:50};
  let parray = map_to_array(probz, 16);
  for (i = 0; i < 16; ++i) {
    if (parray[i] > 0 && parray[i] > rand(100)) {
      let v = 100 + rand(28);
      if (i == 0 || i == 8) {
        v = 128;
      }
      if (i > 12) {
        v = 72;
      }
      let offset = 0;
      if (i > 0) {
        offset = rand(25);
      }
      note_on_at(bd, 1, i * pp + offset, vel = v);
    }
  }
}

let hhbeat = fn(hh)
{
  let sw = rand(pp/2);
  if (rand(100) < 95) {
    for (i = 0; i < 16; ++i) {
      if (rand(100) < 95) {
        let offset = 0;
        let v = 80 + rand(27);
        if (i % 2 == 1) {
          offset = sw;
        }
        note_on_at(hh, 1, i * pp + offset, vel = v);
      }
    }
  }
}


let moog_midi_assign = fn()
{
  midi_map(1, "mo:eg1_attack");
  midi_map(2, "mo:eg1_decay");
  midi_map(3, "mo:eg1_release");
  midi_map(4, "mo:l1rate");
  midi_map(5, "mo:fc");
  midi_map(6, "mo:fq");
}

let dx_midi_assign = fn()
{
  midi_map(1, "dx:algo");
  midi_map(2, "dx:o1wav");
  midi_map(3, "dx:o1rat");
  midi_map(4, "dx:o1det");
  midi_map(5, "dx:e1att");
  midi_map(6, "dx:e1dec");
  midi_map(7, "dx:e1sus");
  midi_map(8, "dx:r1rel");
}

let play_sub = fn(instrument, start_idx, sub_range, arr)
{
  let local_inc = sub_range / len(arr);
  for (i = 0; i < len(arr); ++i) {
    let plx = start_idx + i * local_inc;

    if (type(arr[i]) == "ARRAY") {
      if (rand(10) < 9) {
        play_sub(instrument, plx, local_inc, arr[i]);
      }
    }
    let drift = 0;
    if (i % 2 == 1) {
      drift = rand(20);
    }
    let v = 100 + rand(27);
    if (plx % 960 == 0) {
      v = 127;
    }
    if (type(arr[i]) == "NUMBER" && arr[i] > 0) {
      note_on_at(instrument, arr[i], plx + drift, dur = 200 + rand(300), vel = v);
    }
  }


}

let player = fn(instrument, beat)
{
  play_sub(instrument, 0, 3840, beat);
}

let bassgen = fn()
{
  let onehit = [1, 0, 0, 0];
  let onehit2 = [0, 1, 0, 0];
  let onehit3 = [0, 0, 1, 0];

  let twohit = [1, 0, 0, 1];
  let twohit2 = [1, 0, 1, 0];

  let rhm = [];
  if (rand(100) < 70) {
    rhm = twohit;
  } else {
    rhm = onehit;
  }
  for (i = 0; i < 3; ++i) {
    let rnd = rand(100);
    if (rnd < 50) {
      if (rnd < 20) {
        rhm = rhm + onehit;
      } else {
        if (rnd < 35) {
          rhm = rhm + onehit2;
        } else {
          rhm = rhm + onehit3;
        }
      }
    } else {
      if (rnd < 80) {
        rhm = rhm + twohit;
      } else {
        rhm = rhm + twohit2;
      }
    }
  }
  return rhm;
}
