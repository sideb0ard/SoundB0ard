
let ppblah_gen = gen()
{
  setup()
  {
    let hv = 10;
    let delz = [1, 160, 30, 50];
    let delzx = 0;
    let delfb = [10, 70, 50, 30];
    let dfbx = 0;
    set sbdrum:bd_key 4;
    set sbdrum:sd_key 4;
    let octz = [1, 2];
    let ox = 0;

    let algz = [0, 1, 3, 4];
    let ax = 0;

    let bpmz = [140, 110, 100, 130];
    let bx = 0;
  }
  run()
  {
    if (count % 18 < 16) {
      for (let i = 0; i < 16; ++i) {
        let offset = 25;
        if (i % 2 == 0) {
          offset = 0;
        }
        if (rand(100) < 90) {
          if (i == 0 || i == 8) {
            note_on_at(sbdrum, 0, i* pp);
            note_on_at(sb2, 0, i* pp);
          }
        }
        if (i == 10 && count % 2 == 1) {
          note_on_at(sbdrum, 0, i* pp, vel = 100);
        }
        if (i == 4 || i == 12) {
          note_on_at(sbdrum, 1, i* pp);
          note_on_at(sbdrum, 3, i* pp + 30);
        }
      }
    }

    if (count % 2 == 0) {
      set sbdrum:cp_delay_ms delz[delzx];
      delzx = incr(delzx, 0, len(delz));
      set dx:algo algz[ax];
      ax = incr(ax, 0, len(algz));
    }
    if (count % 3 == 0) {
      set sbdrum:cp_delay_fb delfb[dfbx];
      set sbdrum:bd_detune delfb[dfbx];
      dfbx = incr(dfbx, 0, len(delfb));
      set sbdrum:bd_octave octz[ox];
      ox = incr(ox, 0, len(octz));
    }
    if (count % 5 == 4) {
      set sbdrum:cp_eg_release 500;
    } else {
      set sbdrum:cp_eg_release 100;
    }

    #let pp = 3840 / 8;
    if (count % 8 < 6) {
      set sbdrum:hh_decay delfb[dfbx];
      for (let i = 0; i < 16; ++i) {
        let offs = 40;
        if (i % 2 == 0) {
          offs = 0;
        }
        #note_on_at(sbdrum, 3, i * pp + offs, vel = hv);
        note_on_at(sbdrum, 2, i * pp + offs, vel = hv);
      }
      hv = hv + 5;
      if (hv > 60) {
        hv = 10;
      }
    } else {
      set sbdrum:hh_attack 100;
    }
    if (count % 8 == 7) {
      bpm bpmz[bx];
      bx = incr(bx, 0, len(bpmz));
    }
  }
}

# Dx - WHHXc
# mo - gurl2
# Taylor Dane - Fm [41, 44, 48] / D# [51, 55, 58] / Cm [48, 51, 55]
let taylorblah_gen = gen()
{
  setup()
  {
    #let t = 10444;
    let t = rand(10444);
    let ntz2 = [ [41, 44, 48], [51, 55, 41],  [48, 51, 55]];
    #let ntz2 = [ [40, 43, 47] ];
    #let ntz = [  [51, 55, 58] ];
    let nx = 0;
    let d = 200;
  }
  run()
  {
    let p = bits(((t/4)>>(t/4))>>(t>>(t/8))|t>>2);
    if (count % 4 == 3) {
      p = bits(74 * ( t | ( t >> 2 | t >> 16 ) ));
    }
    ++t;
    # t++;

    let numz = numzFromBits(p);
    #print("NUMZ:", numz);
    let ppp = 3840 / len(numz);
    for (let i = 0; i < len(numz); i++) {
      if (numz[i] < 4) {
        note_on_at(sbdrum, numz[i], i * ppp);
        set raga:stutter 1;
      }
      if (numz[i] == 10) {
        note_on_at(mo, 41, i * pp, dur = numz[i] * 4, vel = 100 + rand(27));
        set raga:vol 0;
      }
      if (numz[i] == 13) {
        p2 $ ppblah_gen;
        note_on_at(mo, 44, i * pp, dur = numz[i] * 4, vel = 100 + rand(27));
        set raga:vol 1;
      }
      if (numz[i] == 11) {
        note_on_at(mo, 47, i * pp);
        let qpp = 3840  / 4;
        for (let j = 0; j < 4; j++) {
          p = bits(((t/2)>>(t/3))>>(t>>(t/8))|t>>2);
          ++t;
          numz = numzFromBits(p);
          for (let k = 0; k < 16; k++) {
            if (numz[i] < 4) {
              note_on_at(sbdrum, numz[i], qpp * j + ppp);
            }
            if (numz[i] == 7) {
              note_on_at(mo, 29, qpp * j + ppp);
            }
            if (numz[i] == 11) {
              note_on_at(mo, 36, qpp * j + ppp);
            }
            if (numz[i] == 12) {
              note_on_at(mo, 55, qpp * j + ppp);
            }
            if (numz[i] == 13) {
              note_on_at(mo, 51, qpp * j + ppp);
            }
          }
        }

      }
      if (numz[i] == 4) {
        p2 $ "";
      }
    }

    if (count % 16 < 14) {
      let nt = down(ntz2[nx], 36);
      for (let i = 0; i < 16; ++i) {
        if (p[i] == 1) {
          note_on_at(dx, nt, i * pp, dur = d);
        }
      }
    } else {
      let nt = ntz2[nx];
      let nti = 0;
      for (let i = 0; i < 16; ++i) {
        if (p[i] == 1) {
          note_on_at(mo, nt[nti], i * pp, dur = nt[nti] * 3);
          d = d + 5;
          if (d > 210) {
            d = 160;
          }
          nti = incr(nti, 0, len(nt));
        }
      }
    }
    if (count % 4 == 3) {
      nx = incr(nx, 0, len(ntz2));
    }
  }
}


let numzFromBits = fn(bits)
{
  if (len(bits) % 4 != 0) {
    print("Bits need to be in chunks of 4");
    return;
  }

  let returnNumz = [];
  let curNum = 0;
  for (let i = 0; i < len(bits); i = i + 4) {
    let num = 0;
    if (bits[i] > 0) {
      num = num + 8;
    }
    if (bits[i+1] > 0) {
      num = num + 4;
    }
    if (bits[i +2] > 0) {
      num = num + 2;
    }
    if (bits[i + 3] > 0) {
      num = num + 1;
    }
    push(returnNumz, num);
  }
  return returnNumz;
}
