
let bd = sample(bd/dm02_909_kickdrum_002_drive.wav);
let ch = sample(ch/CH_909_15.wav);
let oh = sample(oh/OH_909_15.wav);
let loon = sample(noises/loon-bird.aiff);
let sd = sample(sd/hdSD.wav);

let sd1 = sample(sd/weekendSnare.aiff);
let sd2 = sample(sd/mawhsnare2.aiff);
let sd3 = sample(sd/suburbanBase.aiff);


load_preset(mo, "808-2"); vol mo 0.5;
load_preset(dx, "WNARR"); vol dx 0.5;
load_preset(dx2, "MURPIAN"); vol dx2 1;
load_preset(dx3, "old_banjo_"); vol dx3 0.6;
let dx4 = fm();
load_preset(dx4, "WURNGGx");
send("delay", loon);
bpm 115;
let drumz = loop(dloops2/droopzfixd.aif); vol drumz 0;
let drumz2 = loop(dloops2/droopzACCUMPfixd.aif); vol drumz2 0;
let shr = loop(loops/VShiRiser.aiff); set shr:len 4; vol shr 0;
add_fx(drumz, "distort");
add_fx(drumz2, "distort");
add_fx(drumz, "filter"); set drumz:fx1:type 1;
set mo:l1rate 0.1;
p19 $ playitblah_gen;

#sched(0, 0, 1, 3840 * 2, "vol drumz %");
# p1 $ chordblah_gen;
# p2 $ loonblah_gen;
# p4 $ bbreakblah_gen;

# sched(0, 0, 1, 3840 * 2, "vol drumz %");
# p3 $ drrrblah_gen;
# p4 $ bbreakblah_gen;
#p5 $ dxstabblah_gen; sched(0, 0, 0.4, 3840, "vol dx %");

# p3 $ fullchordblah_gen; sched(0, 0, 0.5, 3840, "vol mo %");
# p9 $ driumzblah_gen; p3 $ ""

# p3 $ ""; p5 $ mofxblah_gen

let bbreakblah_gen = gen()
{
  setup()
  {
  }
  run()
  {
    vol drumz 1;
    vol drumz2 0;
    if (count > 32) {
      if (count % 8 == 7) {
        set drumz:stutter 1;
      }
      if (count % 13 == 11) {
        set drumz:scramble 1;
      }
      if (count % 16 == 14) {
        set drumz2:reverse 1;
      }
      if (count % 16 == 15) {
        set drumz:reverse 1;
        vol drumz2 1;
        vol drumz 0;
      }
      if (count % 18 == 17) {
        solo(drumz, at = 12 * pp);
        solo(drumz2, at = 12 * pp);
      }
    }
  }
}


# p9 $ ""; note_off(drumz, 0); p4 $ fellblah_gen

# p5 $ ""; p4 $ "" ; p3 $ fullchordblah_gen; p9 $ driumzblah_gen
# p10 $ riffblah_gen

# p4 $ dxstabblah_gen; p3 $ "";

# p3 $ ""
# p9 $ ""; note_off(drumz, 0); p10 $ "";

#  p9 $ driumzblah_gen;


let drrrblah_gen = gen()
{
  setup()
  {
  }
  run()
  {
    if (count % 4 == 3) {
      set drumz:stutter 1;
    }
    if (count % 11 == 10) {
      set drumz:scramble 1;
      # solo(auch, at=8*pp);
    }
    if (count % 16 == 15) {
      set drumz:reverse 1;
      solo(drumz, at=8*pp);
    }
  }
}




let fmaj7 = [53, 57, 60, 64];
let gmaj7 = [55, 59, 62, 66];
let cmaj7 = [48, 52, 55, 59];
let dmaj7 = [50, 54, 57, 61];
let prog = [fmaj7, gmaj7, cmaj7, dmaj7];
let cpx = 0;
let chord = prog[cpx];

let chordblah_gen = gen()
{
  setup()
  {
  }
  run()
  {
    if (count % 2 == 1) {
      cpx = incr(cpx, 0, len(prog));
    }
    chord = prog[cpx];
    #print(chord);
    #note_on_at(mo, chord, 0, dur = 3800);

  }
}

let dxstabblah_gen = gen()
{
  setup()
  {
    let rhmz = [5];
    let rx = 0;
    # let o2ratz = [4, 7, 10, 1, 0.7];
    let o2ratz = [0.7, 4, 7];
    let o2x = 0;

    let durz = [50, 100, 150, 200, 250];
    let drx = 0;
  }
  run()
  {
    if (count % 18 < 16) {
      let beat = bjork(5, 16);
      if (count % 7 == 0) {
        beat = bjork(3, 16);
      }
      if (count % 13 == 0) {
        beat = bjork(7, 16);
      }
      for (let i = 0; i < 16; i++) {
        let offs = 20;
        if (i % 2 == 0) {
          offs = 0;
        }
        if (beat[i] == 1) {
          note_on_at(dx, down(chord, 12), i * pp + offs, dur = durz[drx]);
          drx = incr(drx, 0, len(durz));
        }
      }
    }
    if (count % 4 == 0) {
      set dx:o2rat o2ratz[o2x];
      o2x = incr(o2x, 0, len(o2ratz));
    }
  }
}

let loonblah_gen = gen()
{
  setup()
  {
    let delfbz = [10, 65, 30, 50, 90];
    let dlx = 0;
    let delms = [300, 100, 50, 200, 500];
    let dmx = 0;
  }
  run()
  {
    set mixer:delay:fb delfbz[dlx];
    dlx = incr(dlx, 0, len(delfbz));
    if (count % 2 == 1) {
      set mixer:delay:ms delms[dmx];
      dmx = incr(dmx, 0, len(delms));
    }
    if (count % 2 == 0) {
      note_on(loon, 1, dur = 0);
    }
  }
}


let drblah_gen = gen()
{
  setup()
  {
  }
  run()
  {
    note_on_at(bd, 1, 0);
    note_on_at(bd, 1, 4 * pp);
    note_on_at(bd, 1, 8 * pp);
    note_on_at(bd, 1, 12 * pp);
    note_on_at(bd, 1, 14 * pp);
  }
}

let hhblah_gen = gen()
{
  setup()
  {
    let hhz = [1, 1, 1, 0,  0, 1, 1, 1,  1, 1, 0, 1,  0, 0, 1, 0];
  }
  run()
  {
    let hatz = hhz;
    if (count % 8 == 6) {
      hatz = rand_array(16, 0, 1);
    }
    for (let i = 0; i < 16; i++) {
      let off = 10;
      if (i % 2 == 0) {
        off = 0;
      }
      let v = 40 + rand(50);
      if (hatz[i] == 1) {
        note_on_at(ch, 1, i * pp + off, vel = v);
      } else {
        note_on_at(oh, 1, i * pp + off, vel = v);
      }
    }
  }
}

let melblah_gen = gen()
{
  setup()
  {
    let bmel1 = [1, 0, 0, 0,  1, 0, 0, 0,  1, 0, 0, 1,  1, 0, 0, 0];
    let bmel2 = [1, 0, 0, 1,  0, 1, 0, 0,  1, 0, 0, 1,  0, 0, 1, 0];
    let durz = [500, 400, 250, 400, 400];
    let drx = 0;
  }
  run()
  {
    let mel = bmel1;
    if (cpx % 2 == 0) {
      mel = bmel2;
    }
    let chrd = down(chord, 36);
    for (let i = 0; i < 16; i++) {
      if (mel[i] == 1) {
        note_on_at(dx2, chrd[0], i * pp, dur = durz[drx]);
      }
    }
    drx = incr(drx, 0, len(durz));
  }
}

let bsss2lah_gen = gen()
{
  setup()
  {
    let bass = [41, 0, 0, 41,  0, 0, 41, 0,  0, 41, 0, 0,  41, 0, 51, 49];
  }
  run()
  {
    for (let i = 0; i < 16; i++) {
      if (bass[i] > 0) {
        note_on_at(dx4, bass[i] - 24, i * pp, dur = 40);
      }
    }
  }
}

# 3840 midi ticks per loop. # bpm 140
# 60 / 140 = 0.428571 sec per beat, 428.571 ms
# 4 beats in a loop, so 4 * 428.571 = 1714.28 ms == 3840 ticks
# 100 / 1714.28 * 1000 = 58.3335 %
# 58.3335 % of 3840 = 2240.01
# 1000ms == 2240.01 midi ticks
let onz = [2240, 4480, 1120];
let offz = [1120, 240, 1120, 480];


# FRAAZZ
let fellblah_gen = gen()
{
  setup()
  {
    let onx = 0;
    let offx = 0;

    let next_on_at = 0;
    #let chrd = up([25, 28, 32, 35], 24);
  }
  run()
  {
    let max_attempts = 10;
    for (let i = 0; i < max_attempts; i++) {

      if (next_on_at > 3840) {
        next_on_at = next_on_at % 3840;
        break;
      }

      let note_dur = onz[onx];
      let silence_dur = offz[offx];

      onx = incr(onx, 0, len(onz));
      offx = incr(offx, 0, len(offz));

      #print("PLATAT:", next_on_at);
      note_on_at(dx, chord, next_on_at, dur = note_dur);
      next_on_at = next_on_at + note_dur + silence_dur;

    }
  }
}

let riffblah_gen = gen()
{
  setup()
  {
    let beatmain = [1, 0, 1, 1,  0, 0, 1, 1,  1, 1, 0, 1,  0, 0, 0, 0];
    let durz = [500, 300, 100, 50];
    let drx = 0;
  }
  run()
  {
    let beat = beatmain;
    if (count % 4 == 3) {
      beat = rand_array(16, 0, 1);
    }

    for (let i = 0; i < 16; i++) {
      if (beat[i] == 1) {
        note_on_at(dx2, chord[0]-24, i * pp, dur = druz[drx]);
      }
    }
    drx = incr(drx, 0, len(durz));
  }
}

let fullchordblah_gen = gen()
{
  setup()
  {
    #let l1ratez = [0.5, 4, 8, 7, 12];
    # let l1ratez = [0.2, 0.1, 0.7];
    let l1ratez = [0.1];
    let l1x = 0;
  }
  run()
  {
    if (count % 8 == 0) {
      set mo:l1_filter_en 0;
    }
    if (count % 8 == 6) {
      set mo:l1_filter_en 1;
    }

    if (count % 2 == 0) {
      note_on_at(mo, chord, 0, dur = 7500);
    }
    if (count % 3 == 0) {
      set mo:l1rate l1ratez[l1x];
      l1x = incr(l1x, 0, len(l1ratez));
    }
  }
}

let mofxblah_gen = gen()
{
  setup()
  {
  }
  run()
  {
    if (count % 4 == 0) {
      sched(0, 2, 90, 3840 * 4, "set mo:pw %");
    }

    if (count % 6 == 0) {
      sched(0, 80, 9000, 3840 * 6, "set mo:fc %");
    }

    if (count % 8 == 7) {
      sched(0, 12, 0.5, 3840 * 2, "set mo:l1rate %");
    }
  }
}

let playitblah_gen = gen()
{
  setup()
  {
    let bar = 0;
  }
  run()
  {
    print("bar:", bar);
    if (bar == 0) {
      p1 $ chordblah_gen;
      p2 $ loonblah_gen;
      sched(3840, 0, 3840, 1, "vol mo %");
      p3 $ fullchordblah_gen;
    }
    if (bar == 4) {
      set drumz:reverse 1;
      p4 $ bbreakblah_gen;
      sched(3840, 0.5, 1, 3840 * 2, "vol drumz %");
    }

    if (bar == 12) {
      p2 $ "";
      p6 $ bssslah_gen;
      p3 $ snrrblah_gen;
      p7 $ riffblah_gen;
    }
    if (bar == 24) {
      p3 $ "";
      p4 $ ""; vol drumz 0;
      # note_off(drumz, 0);
      p6 $ "";
      p7 $ "";
      sched(3840, 0, 0.4, 3840, "vol dx %");
      p5 $ fellblah_gen;
    }
    if (bar == 28) {
      p10 $ hhblah_gen;
      p3 $ snrrblah_gen;
    }
    if (bar == 32) {
      p5 $ dxstabblah_gen;
      p4 $ bbreakblah_gen;
      # note_on(drumz, 1, dur = 0);
    }
    if (bar == 48) {
      p4 $ "";
      vol drumz 0;
      p7 $ "";
      p5 $ "";
      p6 $ dxmelblah_gen;
    }

    if (bar == 60) {
      # note_on(drumz, 1, dur = 0);
      p4 $ bbreakblah_gen;
    }
    if (bar == 62) {
      p6 $ "";
      p5 $ dxstabblah_gen;
      p10 $ hhblah_gen;
    }
    if (bar == 72) {
      p4 $ "";
      vol drumz 0;
      # note_off(drumz, 0);
      p5 $ "";
      p10 $ hhblah_gen;
      p6 $ "";
      p10 $ "";
      p2 $ loonblah_gen;
      sched(3840, 0, 0.7, 3840, "vol shr %");
    }
    if (bar == 74) {
      p5 $ drblah_gen;
      p3 $ fullchordblah_gen;
      p8 $ snrrblah_gen;
    }
    if (bar == 82) {
      p2 $ "";
      vol drumz 1;
      p4 $ bbreakblah_gen;
      p6 $ bsss2lah_gen;
      vol shr 0;
      p8 $ "";
      p10 $ "";
    }
    if (bar == 92) {
      p13 $ drrrblah_gen;
      p4 $ bbreakblah_gen;
      p6 $ bssslah_gen;
      p5 $ "";
      p2 $ loonblah_gen;
    }
    if (bar == 100) {
      p6 $ bsss2lah_gen;
      p11 $ mofxblah_gen;
      p7 $ riffblah_gen;
      p3 $ "";
    }
    if (bar == 110) {
      p6 $ bssslah_gen;
      p4 $ ""; vol drumz 0;
      p13 $ "";
    }
    if (bar == 116) {
      p7 $ "";
      p6 $ "";
    }
    if (bar == 118) {
      p2 $ "";
    }

    bar++;
  }
}


let dxmelblah_gen = gen()
{
  setup()
  {
    let riffmain = [1, 0, 1, 1,  0, 0, 1, 1,  1, 1, 0, 1,  0, 0, 0, 0];
    let pix = 0;
    let maxpix = 2;
    let durz = [100, 200, 600, 400, 100, 200, 300];
    let drx = 0;
  }
  run()
  {
    let riff = riffmain;
    if (count % 8 == 7) {
      riff = rand_beat();
    }
    for (let i = 0; i < 16; i++) {
      if (riff[i] == 1) {
        #note_on_at(dx, down(chord, 12), i * pp, dur = durz[drx], vel = 80 + rand(30));
        #note_on_at(dx2, up(chord, 12), i * pp, dur = durz[drx]);
        note_on_at(dx3, chord, i * pp, dur = durz[drx], vel = 80 + rand(40));
        pix = incr(pix, 0, maxpix);
      }
    }
    drx = incr(drx, 0, len(durz));
    if (count % 7 == 6) {
      maxpix = incr(maxpix, 1, len(chord));
    }
  }
}

# dx4 // WURNGGx
let bssslah_gen = gen()
{
  setup()
  {
    let rhm1 = [1, 0, 0, 1,  1, 0, 0, 1,  0, 0, 1, 0,  1, 0, 0, 1];
    let rhm2 = [0, 0, 0, 1,  0, 0, 0, 1,  0, 0, 1, 0,  1, 0, 0, 0];
    let cntr = 0;
    let durz = [100, 50, 200, 300, 500, 150];
    let drx =0;
    let op2z = [80, 85, 87, 90];
    let o2x = 0;
    let plx = 0;
  }
  run()
  {
    if (count % 24 < 23) {

      let chrd = down(chord, 24);

      plx++;
      let rhm = rhm1;
      if (plx % 8 > 5) {
        rhm = rhm2;
      }

      for (let i = 0; i < 16; i++) {
        if (rhm[i] == 1) {
          let nt = chrd[0];
          cntr++;
          if (cntr % 13 == 0) {
            nt = chrd[1] + 12;
          }
          if (cntr % 17 == 0) {
            nt = chrd[2];
          }
          note_on_at(dx4, nt, i * pp, dur = durz[drx]);
        }
      }
      drx = incr(drx, 0, len(durz));
      set dx4:op2out op2z[o2x];
      if (count % 4 == 3) {
        o2x = incr(o2x, 0, len(op2z));
      }
    }
  }
}

let snrrblah_gen = gen()
{
  setup()
  {
    let sdbeat = rand_array(16, 0, 1);
    let snrz = [sd, sd1, sd2, sd3];
    let sx = 0;
    let velz = [30, 50, 70, 80, 90, 100, 120, 120];
    let vlx = 0;
    let durz = [10, 50, 100, 400, 600];
    let drx = 0;
    let swng = 20;
  }
  run()
  {
    if (count % 4 == 3) {
      sdbeat = rand_array(16, 0, 1);
    }
    for (let i = 0; i < 16; i++) {
      let offs = swng;
      if (i % 2 == 0) {
        offs = 0;
      }
      if (sdbeat[i] == 1) {
        note_on_at(snrz[sx], 1, i * pp + offs, dur = durz[drx], vel = velz[vlx]);
        sx = incr(sx, 0, len(snrz));
        drx = incr(drx, 0, len(durz));
        vlx = incr(vlx, 0, len(velz));
      }
    }
  }
}
