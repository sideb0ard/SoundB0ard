
let bd = sample(bd/dm02_909_kickdrum_002_drive.wav);
let ch = sample(ch/CH_909_15.wav);
let oh = sample(oh/OH_909_15.wav);
let loon = sample(noises/loon-bird.aiff);
let sd = sample(sd/hdSD.wav);

load_preset(mo, "808-2"); vol mo 0.5;
load_preset(dx, "WNARR");
load_preset(dx2, "808zzc");
send("delay", loon);
bpm 115;
let drumz = loop(dloops2/drumzzf.wav); vol drumz 0;
add_fx(drumz, "distort");
sched(0, 0, 1, 3840 * 2, "vol drumz %");

p1 $ chordblah_gen;
p2 $ loonblah_gen;
p4 $ bbreakblah_gen;
# p19 $ playitblah_gen;

# sched(0, 0, 1, 3840 * 2, "vol drumz %");
# p3 $ drrrblah_gen;
# p4 $ bbreakblah_gen;
#p5 $ dxstabblah_gen; sched(0, 0, 0.4, 3840, "vol dx %");

# p3 $ fullchordblah_gen; sched(0, 0, 0.5, 3840, "vol mo %");
# p9 $ driumzblah_gen; p3 $ ""

# p3 $ ""; p5 $ mofxblah_gen

let bbreakblah_gen = gen()
{
  setup()
  {
    let kick = 0;
    let snare = 2;
    let shuf = 4;
    let pat0 = {0:0, 960:2, 1440:4, 3360:2};
    let pat1 = {0:0, 960:2};
    let pat2 = {0:0, 480:4, 960:2, 1440:4, 1920:2, 2880:4, 3360:2};
    let pat3 = {0:0, 480:2, 960:4, 1920:2, 2880:0, 3360:2};
    let patz = [pat0, pat1, pat2, pat3];
    let px = 0;
    let durxz = [10, 50, 100, 150, 200];
    let drx = 0;
  }
  run()
  {
    let pat = patz[px];
    px = incr(px, 0, len(patz));
    let kz = keys(pat);
    #print(kz, "LEN:", len(pat));
    #print(pat);
    if (count % 16 < 15) {
      for (let i = 0; i < len(pat); i++) {
        let on_at = kz[i];
        let note = pat[kz[i]];
        let durrr = 3840 - on_at;
        if (i < (len(pat) - 1)) {
          durrr = kz[i+1] - on_at;
        }
        note_on_at(drumz, note, on_at, dur = durrr - durxz[drx]);
        drx = incr(drx, 0, len(durxz));
      }
    }
  }
}


# p9 $ ""; note_off(drumz, 0); p4 $ fellblah_gen

# p5 $ ""; p4 $ "" ; p3 $ fullchordblah_gen; p9 $ driumzblah_gen
# p10 $ riffblah_gen

# p4 $ dxstabblah_gen; p3 $ "";

# p3 $ ""
# p9 $ ""; note_off(drumz, 0); p10 $ "";

#  p9 $ driumzblah_gen;



let drrrblah_gen = gen()
{
  setup()
  {
  }
  run()
  {
    if (count % 4 == 3) {
      set drumz:stutter 1;
    }
    if (count % 11 == 10) {
      set drumz:scramble 1;
    }
    if (count % 16 == 15) {
      set drumz:reverse 1;
      # solo(drumz, at=8*pp);
    }
  }
}




let fmaj7 = [53, 57, 60, 64];
let gmaj7 = [55, 59, 62, 66];
let cmaj7 = [48, 52, 55, 59];
let dmaj7 = [50, 54, 57, 61];
let prog = [fmaj7, gmaj7, cmaj7, dmaj7];
let cpx = 0;
let chord = prog[cpx];

let chordblah_gen = gen()
{
  setup()
  {
  }
  run()
  {
    if (count % 2 == 1) {
      cpx = incr(cpx, 0, len(prog));
    }
    chord = prog[cpx];
    #print(chord);
    #note_on_at(mo, chord, 0, dur = 3800);

  }
}

let dxstabblah_gen = gen()
{
  setup()
  {
    let rhmz = [5];
    let rx = 0;
    # let o2ratz = [4, 7, 10, 1, 0.7];
    let o2ratz = [0.7, 4, 7];
    let o2x = 0;
  }
  run()
  {
    let beat = bjork(5, 16);
    let pp = 3840 / 16;
    for (let i = 0; i < 16; i++) {
      if (beat[i] == 1) {
        note_on_at(dx, down(chord, 12), i * pp, dur = 200);
      }
    }
    if (count % 2 == 0) {
      set dx:o2rat o2ratz[o2x];
      o2x = incr(o2x, 0, len(o2ratz));
    }
  }
}

let loonblah_gen = gen()
{
  setup()
  {
    let delfbz = [10, 65, 30, 50, 90];
    let dlx = 0;
  }
  run()
  {
    set mixer:delay:fb delfbz[dlx];
    dlx = incr(dlx, 0, len(delfbz));
    if (count % 2 == 0) {
      note_on(loon, 1, dur = 0);
    }
  }
}


let drblah_gen = gen()
{
  setup()
  {
  }
  run()
  {
    note_on_at(bd, 1, 0);
    note_on_at(bd, 1, 4 * pp);
    note_on_at(bd, 1, 8 * pp);
    note_on_at(bd, 1, 12 * pp);
    note_on_at(bd, 1, 14 * pp);
  }
}

let hhblah_gen = gen()
{
  setup()
  {
    let hhz = [1, 1, 1, 0,  0, 1, 1, 1,  1, 1, 0, 1,  0, 0, 1, 0];
  }
  run()
  {
    let hatz = hhz;
    if (count % 8 == 6) {
      hatz = rand_array(16, 0, 1);
    }
    for (let i = 0; i < 16; i++) {
      let off = 10;
      if (i % 2 == 0) {
        off = 0;
      }
      let v = 40 + rand(50);
      if (hatz[i] == 1) {
        note_on_at(ch, 1, i * pp + off, vel = v);
      } else {
        note_on_at(oh, 1, i * pp + off, vel = v);
      }
    }
  }
}

let melblah_gen = gen()
{
  setup()
  {
    let bmel1 = [38, 0, 40, 43,  45, 43, 0, 45,  0, 40, 43, 0,  40, 0, 49, 0];
    let bmel2 = [0, 39, 0, 41,  0, 46, 0, 51,  41, 41, 39, 0,  46, 0, 48, 0];
  }
  run()
  {
    let mel = bmel1;
    if (cpx % 2 == 0) {
      mel = bmel2;
    }
    mel = down(mel, 12);
    for (let i = 0; i < 16; i++) {
      if (mel[i] > 0) {
        note_on_at(dx, mel[i], i * pp, dur = 10);
      }
    }
  }
}

let bssslah_gen = gen()
{
  setup()
  {
    let bass = [41, 0, 0, 41,  0, 0, 41, 0,  0, 41, 0, 0,  41, 0, 51, 49];
  }
  run()
  {
    for (let i = 0; i < 16; i++) {
      if (bass[i] > 0) {
        note_on_at(dx2, bass[i] - 24, i * pp, dur = 40);
      }
    }
  }
}

# 3840 midi ticks per loop. # bpm 140
# 60 / 140 = 0.428571 sec per beat, 428.571 ms
# 4 beats in a loop, so 4 * 428.571 = 1714.28 ms == 3840 ticks
# 100 / 1714.28 * 1000 = 58.3335 %
# 58.3335 % of 3840 = 2240.01
# 1000ms == 2240.01 midi ticks
let onz = [2240, 4480, 1120];
let offz = [1120, 2240, 1120, 4480];


# FRAAZZ
let fellblah_gen = gen()
{
  setup()
  {
    let onx = 0;
    let offx = 0;

    let next_on_at = 0;
    #let chrd = up([25, 28, 32, 35], 24);
  }
  run()
  {
    let max_attempts = 10;
    for (let i = 0; i < max_attempts; i++) {

      if (next_on_at > 3840) {
        next_on_at = next_on_at % 3840;
        break;
      }

      let note_dur = onz[onx];
      let silence_dur = offz[offx];

      onx = incr(onx, 0, len(onz));
      offx = incr(offx, 0, len(offz));

      #print("PLATAT:", next_on_at);
      note_on_at(dx, chord, next_on_at, dur = note_dur);
      next_on_at = next_on_at + note_dur + silence_dur;

    }
  }
}

let riffblah_gen = gen()
{
  setup()
  {
    let beatmain = [1, 0, 1, 1,  0, 0, 1, 1,  1, 1, 0, 1,  0, 0, 0, 0];
    let durz = [500, 300, 100, 50];
    let drx = 0;
  }
  run()
  {
    let beat = beatmain;
    if (count % 4 == 3) {
      beat = rand_array(16, 0, 1);
    }

    for (let i = 0; i < 16; i++) {
      if (beat[i] == 1) {
        note_on_at(dx2, chord[0]-24, i * pp, dur = druz[drx]);
      }
    }
    drx = incr(drx, 0, len(durz));
  }
}

let fullchordblah_gen = gen()
{
  setup()
  {
    #let l1ratez = [0.5, 4, 8, 7, 12];
    # let l1ratez = [0.2, 0.1, 0.7];
    let l1ratez = [0.1];
    let l1x = 0;
  }
  run()
  {
    if (count % 8 == 0) {
      set mo:l1_filter_en 0;
    }
    if (count % 8 == 6) {
      set mo:l1_filter_en 1;
    }

    if (count % 2 == 0) {
      note_on_at(mo, chord, 0, dur = 7500);
    }
    if (count % 3 == 0) {
      set mo:l1rate l1ratez[l1x];
      l1x = incr(l1x, 0, len(l1ratez));
    }
  }
}

let mofxblah_gen = gen()
{
  setup()
  {
  }
  run()
  {
    if (count % 4 == 0) {
      sched(0, 2, 90, 3840 * 4, "set mo:pw %");
    }

    if (count % 6 == 0) {
      sched(0, 80, 9000, 3840 * 6, "set mo:fc %");
    }

    if (count % 8 == 7) {
      sched(0, 12, 0.5, 3840 * 2, "set mo:l1rate %");
    }
  }
}

let mxfblah_gen = gen()
{
  setup()
  {
    let blen = 4;
    let bx = 0;
    let breset = 17;
    let brx = 0;

    let slen = 4;
    let sx = 0;
    let sreset = 13;
    let srx = 0;
  }
  run()
  {
    for (let i = 0; i < 16; i++) {
      if (bx % blen == 0) {
        note_on_at(bd, 1, i * pp);
      }
      bx = incr(bx, 0, blen);
      brx = incr(brx, 0, breset);
      if (brx == 0) {
        bx = 0;
      }

      if (sx % slen == 0) {
        note_on_at(ch, 1, i * pp);
      }
      sx = incr(sx, 0, slen);
      srx = incr(srx, 0, sreset);
      if (srx == 0) {
        sx = 0;
      }
    }
  }
}

let playitblah_gen = gen()
{
  setup()
  {
    let bar = 0;
  }
  run()
  {
    print("bar:", bar);
    if (bar == 0) {
      p1 $ chordblah_gen;
      p2 $ loonblah_gen;
      p4 $ bbreakblah_gen;
      sched(0, 0, 1, 3840 * 2, "vol drumz %");
    }
    if (bar == 4) {
      sched(3840, 0, 3840, 1, "vol mo %");
      p3 $ fullchordblah_gen;
    }
    if (bar == 12) {
      p3 $ "";
      sched(3840, 0, 3840, 0.4, "vol dx %");
      p5 $ dxstabblah_gen;
      p2 $ "";
      p10 $ hhblah_gen;
    }
    if (bar == 16) {
      p9 $ driumzblah_gen;
      p5 $ "";
    }
    if (bar == 20) {
      p4 $ "";
      note_off(drumz, 0);
      p5 $ fellblah_gen;
      p10 $ "":
    }
    if (bar == 24) {
      p10 $ riffblah_gen;
    }
    if (bar == 28) {
      p4 $ bbreakblah_gen;
      p3 $ fullchordblah_gen;
      p5 $ "";
    }
    if (bar == 30) {
      p4 $ ""; note_off(drumz, 0);
      p10 $ hhblah_gen;
    }
    if (bar == 30) {
      p3 $ "";
      p4 $ bbreakblah_gen;
      p5 $ dxstabblah_gen;

    }

    bar++;
  }
}

let driumzblah_gen = gen()
{
  setup()
  {
    #let durz = [0, 50, 100, 200, 500];
    let durz = [0, 0, 0, 0, 0, 50, 200];
    let drx = 0;
  }
  run()
  {
    if (rand(100) < 50) {
      let beat = rand_array(16, 0, 8);
      for (let i = 0; i < 16; i++) {
        if (beat[i] == 1) {
          note_on_at(drumz, 0, i * pp, dur = durz[drx]);
        }
        if (beat[i] == 2) {
          note_on_at(drumz, 4, i * pp, dur = durz[drx]);
        }
        if (beat[i] == 3) {
          note_on_at(drumz, 12, i * pp, dur = durz[drx]);
        }
      }
      drx = incr(drx, 0, len(durz));
    } else {
      note_on_at(drumz, 0, 0, dur = 0);
      # solo(drumz, at=10*pp);
    }

    if (count % 16 == 15) {
      set drumz:reverse 1;
    }
  }
}
