
# Key of A
let key = 21;
let ntz = notes_in_key(key);
# Ramones Blitzkreig Bop
# I - IV - V
let prog = [0, 3, 4];
let px = 0;

let sw = 90;

# load_preset(dx, "ETZ2"); load_preset(dx2, "CTZ"); load_preset(sbdrum, "THUG");

let prog_gen = gen()
{
  setup()
  {
  }
  run()
  {
    if (count % 4 == 3) {
      px = incr(px, 0, len(prog));
    }
  }
}

# dx = l0renzo4 // forkjy // ETZ2
let dxblah_gen = gen()
{
  setup()
  {
    let A = ntz[0];
    let D = ntz[3];
    let E = ntz[4];
    let B = ntz[1];
    let verse_part1 = [A, 0, A, 0, A, 0, A, 0, D, 0, 0, E, 0, 0, 0, 0];
    let verse_part2 = up([E, 0, 0, A, 0, D, D, 0, 0, A, 0, 0, A, 0, 0, 0], 12);
    let verse = [verse_part1, verse_part1, verse_part2];
    let px = 0;

    let chorus_part1 = [D, 0, A, 0, A, 0, A, 0, D, 0, 0, E, 0, 0, 0, 0];
    let chorus_part2 = [D, 0, 0, D, 0, D, D, 0, B, 0, B, 0, E, 0, E, 0];
    let chorus = [chorus_part1, chorus_part2];

    let song_order = [verse, chorus];
    let sx = 0;

    let durz = [180, 1200, 120, 200, 1500, 1000, 100, 950];
    #let durz = [500, 100];
    let drx = 0;

    let cpdelz = [5, 23, 15, 150, 15];
    let cpx = 0;

  }
  run()
  {
    let cur_section = song_order[sx];
    let cur_part = cur_section[px];

    if (count % 23 < 22) {
      for (let i = 0; i < 16; i++) {
        let offset = sw;
        if (i % 2 == 0) {
          offset = 0;
        }

        if (cur_part[i] > 0) {
          note_on_at(dx, notes_in_chord(cur_part[i], key, 4), i * pp + offset, dur = durz[drx]);
        }

        drx = incr(drx, 0, len(durz));
      }

      px = incr(px, 0, len(cur_section));
      if (px == 0) {
        sx = incr(sx, 0, len(song_order));
      }
    }

    if (count % 8 == 0) {
      move_every = true;
    }
  }
}


let inner_reset = false;

let inner_loop_gen = gen()
{
  setup()
  {
    #let cntr = 0;
    #let every_n = 3;
    let bt = [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0];
    let bx = 0;
  }
  run()
  {

    if (inner_reset == true) {
      bx = 0;
      inner_reset = false;
    }
    let val = bt[bx];
    bx = incr(bx, 0, len(bt));

    return val;
  }
}

let move_every = false;

let outer_loop_gen = gen()
{
  setup()
  {
    let cntr = 0;
    let everyz = [11, 23, 7];
    let ex = 0;
    let every_n = everyz[ex];
  }
  run()
  {
    let ret = 0;
    if (cntr % every_n == 0) {
      inner_reset = true;
      ret = 1;
    }
    cntr++;

    if (move_every == true) {
      ex = incr(ex, 0, len(everyz));
      move_every = false;
    }

    return ret;
  }
}

# dx2 WHHXc // briiight
let melblah_gen = gen()
{
  setup()
  {
    let mel1 = [0, 26, 0, 0, 38, 0, 0, 0, 23, 32, 0, 23, 0, 0, 30, 0];
    let mel2 = [0, 0, 35, 0, 37, 30, 0, 0, 0, 23, 0, 0, 0, 21, 23, 0];
    let melz = [mel1, mel2, mel1, mel1, mel2];
    let mx = 0;
    let o3outz = [0, 50, 80];
    let o3x = 0;
    let o2ratz = [7, 2, 4, 8, 15.3];
    let o2x = 0;
  }
  run()
  {

    let mel = melz[mx];
    mx = incr(mx, 0, len(melz));
    for (let i = 0; i < 16; i++) {
      let offs = 67;
      if (i % 2 == 0) {
        offs = 0;
      }

      if (mel[i] > 0) {
        note_on_at(dx2, mel[i], i * pp + offs, dur = 90);
      }
    }
    if (count % 3 == 0) {
      set dx2:op3out o3outz[o3x];
      o3x = incr(o3x, 0, len(o3outz));
    }
    if (count % 4 == 0) {
      set dx2:o2rat o2ratz[o2x];
      o2x = incr(o2x, 0, len(o2ratz));
    }
  }
}

let two2blah_gen = gen()
{
  setup()
  {
    let bt = gen2stepbeat();
    let hhlz = [10, 100, 30, 50, 10];
    let hhx = 0;
  }
  run()
  {

    set sbdrum:hh_decay 10;
    if (count % 4 == 3) {
      for (let i = 0; i < 16; i++) {
        set sbdrum:hh_decay hhlz[hhx] at=i*pp;
        hhx=incr(hhx,0,len(hhlz));
      }
    }

    if (count % 8 == 4) {
      #note_on_at(sbdrum, 0, 0);
      #note_on_at(sbdrum, 0, 4 * pp);
      #note_on_at(sbdrum, 0, 8 * pp);
      #note_on_at(sbdrum, 0, 12 * pp);
    } else {
      for (let i = 0; i < 16; i++) {
        if (bt[i] == 1) {
          note_on_at(sbdrum, 0, i * pp);
        }
      }
    }
    if (count % 4 == 3) {
      bt = gen2stepbeat();
    }
  }
}

let rhm = [1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0];
# mo RUBBERduck // sqwuash // gurl2 // gnurly
let blmoah_gen = gen()
{
  setup()
  {
    let drz = [380, 180, 500, 80, 20, 177, 500, 1000, 800];
    let drx = 0;
    let vlz = [90, 127, 90, 127, 90, 100, 110, 120, 120, 127, 127];
    let vx = 0;
    let swng = 50;
    let plenz = [4, 8, 16];
    let plx = 0;
  }
  run()
  {
    let nt = up(notes_in_chord(notes_in_key(key)[prog[px]], key),12);
    let nx = 0;
    print(plenz[plx]);
    for (let i = 0; i < plenz[plx]; i++) {
      let offset = swng;
      if (i % 2 == 0) {
        offset = 0;
      }
      if (rhm[i] == 0) {
        note_on_at(mo, nt[nx], i *pp + offset, dur = drz[drx], vel = vlz[vx]);
        drx = incr(drx, 0, len(drz));
        vx = incr(vx, 0, len(vlz));
        #nx = incr(nx, 0, len(nt));
      }
    }
    plx = incr(plx, 0, len(plenz));
  }
}

let dx2blah_gen = gen()
{
  setup()
  {
    #let A = ntz[0];
    #let D = ntz[3];
    #let E = ntz[4];
    #let B = ntz[1];
    #let verse_part1 = [A, 0, A, 0, A, 0, A, 0, D, 0, 0, E, 0, 0, 0, 0];
    #let verse_part2 = [A, 0, 0, A, 0, D, D, 0, 0, A, 0, 0, A, 0, 0, 0];
    #let verse = [verse_part1, verse_part1, verse_part1, verse_part2];
    #let px = 0;

    #let chorus_part1 = [D, 0, A, 0, A, 0, A, 0, D, 0, 0, E, 0, 0, 0, 0];
    #let chorus_part2 = [D, 0, 0, D, 0, D, D, 0, B, 0, B, 0, E, 0, E, 0];
    #let chorus = [chorus_part1, chorus_part2];

    #let song_order = [verse, chorus];
    #let sx = 0;

    let durz = [180, 1200, 120, 200, 1500, 1000, 100, 950];
    #let durz = [500, 100];
    let drx = 0;

    let cpdelz = [5, 23, 15, 150, 15];
    let cpx = 0;


  }
  run()
  {
    let chrd = notes_in_chord(notes_in_key(key)[prog[px]], key, 1);
    let chx = 0;
    for (let i = 0; i < 16; i++) {
      if (rhm[i] == 1) {
        note_on_at(dx, chrd[chx], i * pp, dur = durz[drx]);
        chx = incr(chx, 0, len(chrd));
        drx = incr(drx, 0, len(durz));
      }
    }

  }
}
