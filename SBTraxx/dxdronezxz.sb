
# load_preset(dx, "basss"); load_preset(dx2, "detruit")
# DX whodunit // basss
# dx2 - detruit
# 16th is 240 midi ticks
let next_event_gen = gen()
{
  setup()
  {
    let note_durs = [960, 3840, 1920, 192, 1200];
    let ndx = 0;
    let note_rests = [720, 1200, 1920, 1920];
    let nrx = 0;
    let velz = [127, 127, 110, 115, 110, 120, 120];
    let vx = 0;
  }
  run()
  {
    let next_event = [note_durs[ndx], note_rests[nrx], velz[vx]];
    ndx = incr(ndx, 0, len(note_durs));
    nrx = incr(nrx, 0, len(note_rests));
    vx = incr(vx, 0, len(velz));
    return next_event;
  }
}

let noteblah_gen = gen()
{
  setup()
  {
    # Key of C#
    let key = 1;

    let note_ctr = 0;
    let event_time_rollover = 0;
    #let counter_notes = [20, 75];
    let counter_notes = [20, 32, 27];
    let cx = 0;

    let dx2durz = [50, 100, 250, 75, 25];
    let dxdx = 0;

    let algoz = [1, 1, 1, 1, 5];
    let ax = 0;
  }
  run()
  {
    if (event_time_rollover >= 3840) {
      event_time_rollover = event_time_rollover - 3840;
      return;
    }

    let ticks_left_in_loop = 3840 - event_time_rollover;
    let cur_event_schedule_time = event_time_rollover;

    let is_over_loop_time = false;
    for (let i = 0; is_over_loop_time == false; i++) {
      let next_event = next_event_gen();
      let note_len_time = next_event[0];
      let rest_time = next_event[1];
      let v = next_event[2];
      let total_event_time = note_len_time + rest_time;
      let note_on_pp = cur_event_schedule_time;
      let note_off_pp = (cur_event_schedule_time + note_len_time);
      #print("NOTE ON AT:", note_on_pp, " NOTE OFF:", note_off_pp);
      # 39 = d# // 44 = g#
      let root_note = 39;
      if (note_ctr % 7 == 3 || note_ctr % 7 == 4) {
        root_note = 44;
      }

      if (note_ctr % 13 == 0) {
        # 42 f#
        root_note = 54;
      }
      if (note_ctr % 22 == 0) {
        # 42 f#
        root_note = 63;
      }

      # min7
      let chord_mod = 1;
      let chr = notes_in_chord(root_note, key, chord_mod);

      note_ctr++;
      note_on_at(dx, chr, note_on_pp, dur = 0, vel = v);
      note_off_at(dx, 0, note_off_pp);

      # dx2 = detruit
      if (count % 2 == 1) {
        note_on_at(dx2, counter_notes[cx], note_off_pp, dur = dx2durz[dxdx], vel = 100);
        dxdx = incr(dxdx, 0, len(dx2durz));
        cx = incr(cx, 0, len(counter_notes));
      }

      ticks_left_in_loop = ticks_left_in_loop - total_event_time;
      cur_event_schedule_time = cur_event_schedule_time + total_event_time;
      if (ticks_left_in_loop < 0) {
        is_over_loop_time = true;
        event_time_rollover = abs(ticks_left_in_loop);
      }
    }
  }
}

let beatlah_gen = gen()
{
  setup()
  {
    let clapextraCtr = 1;
    let hvz = [30, 40, 60, 80, 90];
    let hvx = 0;
    let delz = [5, 10, 23, 40];
    let dlx = 0;
    let delfb = [0, 30, 60, 90];
    let delx = 0;
    let chrd = [1, 5, 8];
    let chx = 0;

  }
  run()
  {
    if (count % 8 < 7) {
      note_on(sbdrum, 0);
      note_on_at(sbdrum, 3, 3840 / 2 + 30, vel = 90);
      for (let i = 0; i < 16; i++) {
        if (i % 8 == 3) {
          note_on_at(sbdrum, 2, i * pp, vel = hvz[hvx]);
          set sbdrum:cp_delay_ms delz[dlx] at=i*pp;
          dlx = incr(dlx, 0, len(delz));
          set sbdrum:hh_delay_ms delz[dlx] at=i*pp;
          set sbdrum:hh_delay_feedback_pct delfb[delx] at=i*pp;
          delx = incr(delx, 0, len(delfb));
        }
      }
      hvx = incr(hvx, 0, len(hvz));
    }

    if (count % 3 == 0) {
      note_on_at(sbdrum, 3, clapextraCtr * 240, vel = hvz[hvx]);
      clapextraCtr = incr(clapextraCtr, 1, 14);
      #print("YO", chx, chrd[chx]);
      set sbdrum:bd_key chrd[chx];
      chx = incr(chx, 0, len(chrd));
    }
  }
}


let noteeblah_gen = gen()
{
  setup()
  {
  }
  run()
  {
  }
}

