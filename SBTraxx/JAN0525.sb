## load_preset(dx, "SMMTH"); load_preset(dx2, "jazz_organ"); load_preset(sb2, "THUG");
## add_fx(dx, "sidechain", sb2); send("delay", dx);
## let shkr = loop(skrslazrs/SHÃ˜CK07.wav); note_off(shkr, 0);
## bpm 120; vol dx2 1;
## let dx3 = fm(); load_preset(dx3, "WURBKl");


# p1 $ pblah_gen

let setupblah_fn = fn()
{
  midi_init();
  midi_assign(dx);
  dx_midi_assign();
}

let key = 48;
# mode 1 => minor key
let key_mode = 1;
let notez = notes_in_key(key, key_mode);

let moblah_gen = gen()
{
  setup()
  {
    # [48, 50, 51, 53,  55, 56, 58, 60];
    let midxz1 = [56, 0, 0, 50,  0, 50, 0, 0,  0, 60, 0, 0,  0, 0, 51, 0];
    #let midxz1 = [7, 0, 2, 4, 2, 0, 0, 3, 5, 7, 7, 4, 2, 4, 5, 4];
    #let midxz2 = [0, 4, 2, 6, 0, 4, 6, 5, 0, 3, 3, 5, 2, 0, 5, 2];
    let midxz2 = [48, 50, 0, 60,  60, 50, 0, 0,  0, 60, 0, 50,  0, 0, 51, 0];

    let durz = [10, 40, 50, 100, 120, 170];
    let drzx = 0;
    let velz = [80, 90, 110, 127, 90];
    let vx = 0;
  }
  run()
  {
    let midxz = midxz1;
    if (count % 3 == 2) {
      midxz = midxz2;
    }

    if (count % 8 == 4) {
      midxz = down(midxz, 12);
    }

    if (count % 11 == 4) {
      midxz = reverse(midxz);
    }

    for (let i = 0; i < 16; i++) {
      note_on_at(dx3, midxz[i] - 12, i * pp, dur = durz[drzx], vel = velz[vx]);
      drzx = incr(drzx, 0, len(durz));
      vx = incr(vx, 0, len(velz));
    }
  }
}

let EPICblah_gen = gen()
{
  setup()
  {
    let chordz = [0, 5, 2, 6];
    let chx = 0;
    let on_atz = [0, 3840 - 480];
    let durz = [3840 - 480, 3840 + 480];
    let onx = 0;
  }
  run()
  {
    if (count % 3 == 1) {
      sched(0, 0, 0.6, 3840*2, "vol dx %");
      sched(3840*2, 0, 0, 0 , "vol dx %")
    }
    if (count % 2 == 0) {
      for (let i = 0; i < len(on_atz); i++) {
        let on_at = on_atz[onx];
        let root_note = notez[chordz[chx]];
        chx = incr(chx, 0, len(chordz));
        let chrd = notes_in_chord(root_note, key, 0, key_mode);
        #print(chrd, on_at);
        note_on_at(dx, chrd, on_at, dur = durz[onx], vel = 100);
        onx = incr(onx, 0, len(on_atz));
      }
    }
    if (count % 6 == 1) {
      sched(0, 10, 99, 3840*2, "set mixer:delay:fb %");
      sched(3840 * 2, 10, 10, 0, "set mixer:delay:fb %");
    }
  }
}

let sinblah_gen = gen()
{
  setup()
  {
    let sinmel1 = [48,0,0,48, 0, 50,0, 55, 0,0,56,0, 50,0,0,0];
    let sinmel2 = [48, 0, 0, 58, 0, 58, 0, 60, 0, 0, 55, 0, 53, 0, 51, 0];
    let mels = [sinmel1, sinmel1, sinmel2];
    let mx = 0;
    let durz = [100, 200, 500, 1000, 2000];
    let drx = 0;
  }
  run()
  {
    let mel = down(mels[mx], 12);
    #let mel = up(mels[mx], 12);
    mx = incr(mx, 0, len(mels));

    for (let i = 0; i < 16; i++) {
      if(mel[i] > 0) {
        note_on_at(dx2, mel[i], i * pp, dur = durz[drx], vel = 80 + rand(30));
        drx = incr(drx, 0, len(durz));
      }
    }
  }
}

let sin2blah_gen = gen()
{
  setup()
  {
    let sinmel1 =  [51, 0, 0, 51,  0, 0, 51, 0,  0, 55, 0, 0,  51, 0, 0, 0];
    let sinmel2 =  [0, 58, 0, 0,  51, 0, 0, 51,  58, 0, 0, 48,  0, 48, 0, 0];
    let mels = [sinmel1, sinmel1, sinmel2];
    let mx = 0;
    let durz = [100, 200, 500, 1000, 400, 50, 50, 1000, 10, 2000];
    let drx = 0;

    let plmax = 4;
    let plx = 0;
  }
  run()
  {
    let mel = down(mels[mx], 12);
    #let mel = up(mels[mx], 24);
    #let mel = up(mels[mx], 12);
    mx = incr(mx, 0, len(mels));

    for (let i = 0; i < 16; i++) {
      if(mel[plx] > 0) {
        note_on_at(dx2, mel[i], i * pp, dur = durz[drx], vel = 80 + rand(30));
        drx = incr(drx, 0, len(durz));
      }
      plx = incr(plx, 0, plmax);
    }

    plmax = incr(plmax, 3, 16);
  }
}


# acous_elec
# SMMTH



let playdrum_fn = fn(midi_num, pat)
{
  let ppn = 3840 / len(pat);
  for (let i = 0; i < len(pat); i++) {
    if (pat[i] == 1) {
      note_on_at(sb2, midi_num, i * ppn);
    }
  }
}

let cas = sample("garage/CabasaHiMPC6011.wav");
let hhc = sample("garage/HHCH-606_80.wav");
let lst = sample("garage/SideStick_Lindrum_24.wav");

let dblah_gen = gen()
{
  setup()
  {
    let kbeat1 =  [1, 0, 0, 1,  0, 0, 1, 0,  0, 1, 0, 0,  1, 0, 0, 0];
    let kbeat2 = [1, 0, 1, 0,  0, 1, 1, 1,  1, 0, 1, 1,  0, 0, 0, 0];
    let hbeat =  [0, 0, 1, 0,  1, 0, 0, 0,  1, 0, 1, 0,  0, 0, 1, 0];

    let sampz = [cas, hhc, shkr, lst];
    let sx = 0;

    let velz = [70, 80, 90, 50, 110];
    let vx = 0;
  }
  run()
  {
    let kbeat = kbeat1;
    if (count % 8 == 6) {
      kbeat = kbeat2;
    }
    if (count % 4 < 3) {
      playdrum_fn(0, kbeat);
    }
    if (count % 2 == 1) {
      sched(0, 700, 5000, 3840*2, "set sb2:bd_tone %");
    }
    if (count % 3 == 1) {
      sched(0, 70, 190, 3840*3, "set sb2:bd_decay %");
    }

    sched(0, 0.4, 0.05, 3840, "set sb2:hh_vol %");

    if (count % 6 < 4) {
      let beat = hbeat;
      if (count % 4 == 3) {
        beat = rand_array(16, 0, 1);
      }
      playdrum_fn(2, beat);
    }

    if (count % 5 < 3) {
      let invbeat = invert(kbeat);
      for (let i = 0; i < 16; i++) {
        if (invbeat[i] == 1) {
          let samp = sampz[sx];
          sx = incr(sx, 0, len(sampz));
          note_on_at(samp, 1, i * pp, dur = 50, vel = velz[vx]);
          vx = incr(vx, 0, len(velz));
        }
      }
    }

    if (count % 13 == 12) {
      sched(0, 0, 90, 3840*2, "set sb2:hh_delay_feedback_pct %");
      sched(3840*2, 0, 0, 0, "set sb2:hh_delay_feedback_pct %");
      sched(0, 2, 23, 3840*3, "set sb2:hh_delay_ms %");
      sched(3840*3, 3, 3, 0, "set sb2:hh_delay_ms %");
    }

    # SBDRUM CLAPS
    if (count % 4 == 3) {
      cmbeat(sbdrum, 3);
    }
  }
}

let pblah_gen = gen()
{
  setup()
  {
    #let ppat = [1, 0, 1, 1,  0, 1, 1, 0,  1, 1, 0, 1,  1, 0, 1, 1];
    let ppat1 = [1, 0, 1, 1,  0, 1, 0, 1,  1, 0, 1, 1,  0, 1, 0, 1];
    let ppat2 =  [1, 1, 1, 1,  0, 1, 0, 0,  1, 0, 1, 1,  0, 0, 0, 0];
    let ppatz = [ppat1, ppat2, ppat1];
    let ppx = 0;
    let percz = [5, 6, 7];
    let prx = 0;
    let durz = [10, 30, 50, 100, 70];
    let drx = 0;
    let velz = [70, 80, 100, 110, 90, 120];
    let vx = 0;
    let attz = [10, 50, 80, 150, 110, 250, 300];
    let ax = 0;

    let mcntr = 0;
    set sbdrum:fm1_vol 0.2;
    set sbdrum:fm2_vol 0.3;
    set sbdrum:fm3_vol 0.3;

  }
  run()
  {

    if (mcntr < 32) {
      # if (count % 2 == 0) {
        #   note_on(sbdrum, 0);
        # }

      if (count % 13 < 12) {
        let ppat = ppatz[ppx];
        ppx = incr(ppx, 0, len(ppatz));
        for (let i = 0; i < 16; i++) {
          if (ppat[i] == 1) {
            note_on_at(sbdrum, percz[prx], i * pp, dur = durz[drx], vel = velz[vx]);
            drx = incr(drx, 0, len(durz));
            vx = incr(vx, 0, len(velz));
            prx = incr(prx, 0, len(percz));
          }
        }
      }

      if (count % 2 == 0) {
        if (percz[prx] == 5) {
          set sbdrum:fm1_car_eg_attack attz[ax];
        }
        if (percz[prx] == 6) {
          set sbdrum:fm2_car_eg_attack attz[ax];
        }
        if (percz[prx] == 7) {
          set sbdrum:fm3_car_eg_attack attz[ax];
        }
        ax = incr(ax, 0, len(attz));
      }
      if (mcntr > 8) {
        if (count % 4 < 2) {
          EPICblah_gen();
        } else {
          sin2blah_gen();
        }
      }
      if (mcntr > 12) {
        if (count % 6 < 4) {
          moblah_gen();
        }
      }

      if (mcntr == 14) {
        sched(0, 0.2, 0, 3840 * 6, "set sbdrum:fm1_vol %");
      }
      if (mcntr == 17) {
        sched(0, 0.3, 0, 3840 * 7, "set sbdrum:fm2_vol %");
      }
      if (mcntr == 24) {
        sched(0, 0.3, 0, 3840 * 4, "set sbdrum:fm3_vol %");
      }

      if (mcntr > 12) {
        dblah_gen();
      }
    } else {
      if (mcntr < 50) {
        if (mcntr < 40) {
          # >= 32
          if (count % 2 == 0) {
            mamahblah_gen();
          } else {
            EPICbla2h_gen();
          }

          if (mcntr >= 36) {
            dblah_gen();
          }
        } else {
          # FINISH
          mamahblah_gen();
          EPICblah_gen();
        }
      }
    }
    mcntr++;
    print(mcntr, " ",  count);
  }
}

let EPICbla2h_gen = gen()
{
  setup()
  {
    let chordz = [0, 5, 2, 6];
    let chx = 0;
    let beat = [1, 1, 1, 1,  0, 0, 1, 0,  1, 1, 0, 1,  0, 0, 0, 0];
    let durz = [300, 600, 1500, 50, 1000];
    let onx = 0;
  }
  run()
  {
    if (count % 2 == 1) {
      sched(0, 0, 0.6, 3840*2, "vol dx %");
      sched(3840*2, 0, 0, 0 , "vol dx %")
    }
    for (let i = 0; i < 16; i++) {
      if (beat[i] == 1) {
        let root_note = notez[chordz[chx]];
        chx = incr(chx, 0, len(chordz));
        let chrd = notes_in_chord(root_note, key, 0, key_mode);
        note_on_at(dx, chrd, i* pp, dur = durz[onx], vel = 100 + rand(27));
        onx = incr(onx, 0, len(on_atz));
      }
    }
    if (count % 6 == 1) {
      sched(0, 10, 99, 3840*2, "set mixer:delay:fb %");
      sched(3840 * 2, 10, 10, 0, "set mixer:delay:fb %");
    }
  }
}

let mamahblah_gen = gen()
{
  setup()
  {
    # [48, 50, 51, 53,  55, 56, 58, 60]
    let mel1 = [48, 0, 0, 0,  55, 0, 0, 0,  51, 0, 0, 0,  53, 0, 48, 0];
    let mel2 = [55, 0, 0, 50,  0, 0, 55, 0,  0, 51, 0, 0,  0, 0, 48, 0];
  }
  run()
  {
    let mel = mel1;
    if (count % 4 == 3) {
      mel = mel2;
    }
    for (let i = 0; i < 16; i++) {
      if (mel[i] > 0) {
        note_on_at(dx3, mel[i], i * pp, dur = 50);
      }
    }
  }
}

