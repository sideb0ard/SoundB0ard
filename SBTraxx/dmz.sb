# Key of C
let key = 0;

# load_preset(dx, "dirtaedub");  load_preset(mo, "melodiuy")
let playblah_fn = fn(id, pat)
{
  for (let i = 0; i < len(pat); i++) {
    note_on_at(sbdrum, id, pat[i] * pp);
  }
}

let dblah_gen = gen()
{
  setup()
  {
    let bdz = [0, 4, 8, 12];
    let chz = [0, 1, 4, 8, 19, 12, 14];
    let ohz = [4];
    let cp = [8];

    set sbdrum:cp_eg_decay 100;
    set sbdrum:cp_eg_sustain1 1;
    set sbdrum:cp_eg_release 600;
  }
  run()
  {
    if (count % 30 < 29) {
      playblah_fn(2, chz);
    }
    if (count % 16 < 15) {
      playblah_fn(0, bdz);
    }
    if (count % 7 < 5) {
      playblah_fn(1, cp);
    }
    if (count % 8 < 6) {
      playblah_fn(3, cp);
      playblah_fn(4, ohz);
    }
  }
}

let db2lah_gen = gen()
{
  setup()
  {
    let vlz = [100, 100, 100, 100, 120, 127, 127, 90, 90];
    let vlx = 0;
    let sb2delz = [10, 20, 23, 5, 5, 10, 30];
    let sbx = 0;
    set sb2:hh_delay_ms sb2delz[sbx];
  }
  run()
  {
    if (count % 32 < 15) {
      if (count % 7 < 5) {
        for (let i = 0; i < 16; i++) {
          let off = 30;
          if (i % 2 == 0) {
            off = 0;
          }
          note_on_at(sb2, 2, i * pp + off, vel = vlz[vlx]);
          vlx = incr(vlx, 0, len(vlz));
        }
      }
      set sb2:hh_delay_ms sb2delz[sbx];
      sbx = incr(sbx, 0, len(sb2delz));
    }
    if (count % 7 == 5) {
      for (let i = 0; i < 16; i++) {
        if (i % 2 == 0) {
          note_on_at(sb2, 2, i * pp + off, vel = vlz[vlx]);
          vlx = incr(vlx, 0, len(vlz));
        }
      }
    }
  }
}


# androidDreams // 4tet // rexian // SQuinrrr3G // squarey
# flexxy0c // gnurly // melodiuy //
let riddimblah_gen = gen()
{
  setup()
  {
    # A and E
    # let ntz = [33, 28];
    let ntz = [45, 40];
    let nx = 0;
    let velz = [100, 100, 127, 100, 127, 100, 90];
    let vx = 0;
    let durx = [650, 800, 500, 750, 350, 600, 550, 700];
    let drx = 0;
  }
  run()
  {
    let nt = notes_in_chord(ntz[nx], key);
    note_on_at(mo, nt, 4*pp, dur = durx[drx], vel = velz[vx]);
    note_on_at(mo, nt, 12*pp);
    nx = incr(nx, 0, len(ntz));
    drx = incr(drx, 0, len(durx));
    vx = incr(vx, 0, len(velz));
  }
}

let playbass_fn = fn(note, pat, durz)
{
  for (let i = 0; i < len(pat); i++) {
    note_on_at(dx, note, pat[i] * pp, dur = durz[i]);
  }
}

# dx dirtaedub
let bassblah_gen = gen()
{
  setup()
  {
    # Key of C
    # A and E chords
    # A - [9, 12, 16] // A C E
    # E - [4, 7, 11] // E G B
    let az = [4, 8, 10];
    let az_durz = [480, 240, 240];

    let ez = [12];
    let ez_durz = [240];

    let ez2 = [0, 4];
    let ez2_durz = [480, 480];

    let cz = [14];
    let cz_durz = [240];

    let bz = [8];
    let bz_durz = [650];

    #let dxratz = [4.71, 4.71, 4.71, 4.71, 6];
    #let dxx = 0;
  }
  run()
  {
    #set dx:o1rat dxratz[dxx];
    #dxx = incr(dxx, 0, len(dxratz));

    if (count % 17 < 13) {
      # A
      if (count % 2 == 0) {
        playbass_fn(9, az, az_durz);
        playbass_fn(12, cz, cz_durz);
        playbass_fn(16, ez, ez_durz);
      }
    }

    # E
    if (count % 2 == 1) {
      playbass_fn(16, ez2, ez2_durz);
      playbass_fn(11, bz, bz_durz);
    }
  }
}

# dx2
# rrrawr // ralllffr0 // klonk // squig
let dx2blah_gen = gen()
{
  setup()
  {
    # gen from chord_riff(notes_in_chord(21, key));
    # and chord_riff(notes_in_chord(28, key));

    let Ezmel1 =  [0, 31, 0, 35, 0, 0, 35, 0, 0, 31, 0, 35, 0, 0, 31, 0];
    let Azmel1 =  [0, 28, 0, 0, 21, 0, 0, 28, 0, 0, 21, 0, 0, 0, 28, 0];
    let omodz = [0, 12, -12];
    let ox = 0;
    let vlz = [120, 120, 100, 90, 127, 100, 127, 90, 80];
    let vx = 0;
    let drz = [400, 400, 400, 300, 200, 1000, 600];
    let drx = 0;

  }
  run()
  {
    if (count % 16 > 0) {
      let mel = Ezmel1;
      if (count % 2 == 1) {
        mel = Azmel1;
      }
      for (let i = 0; i < 16; i++) {
        if (mel[i] > 0) {
          note_on_at(dx2, mel[i] + omodz[ox], i * pp, dur = drz[drx], vel = vlz[vx]);
          drx = incr(drx, 0, len(drz));
          vx = incr(vx, 0, len(vlz));
        }
      }
    }
    if (count % 4 == 0) {
      ox = incr(ox, 0, len(omodz));
    }
  }
}

