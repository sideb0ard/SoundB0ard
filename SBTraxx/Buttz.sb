# load_preset(dx, "SNURLP2"); add_fx(dx, "delay"); vol dx 0.6;
# load_preset(dx2, "phatz"); load_preset(sbdrum, "buttz");

# Key of E // 40
let key = 36;

# E (40) and A 45

let play_fn = fn(mid_note, pat, rand_vel)
{
  let pp = 3840 / len(pat);
  for (let i = 0; i < len(pat); i++) {
    if (pat[i] > 0) {
      let v = 127;
      if (rand_vel) {
        v = 90 + rand(37);
      }
      note_on_at(sbdrum, mid_note, i * pp, vel = v);
    }
  }

}
let regpattern2 = gen()
{
  setup()
  {
    let bd1 = [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0];
    let bd2 = [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0];
    let bdz = [bd1, bd2];
    let bx = 0;

    let sd1 = [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0];
    let sd2 = [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0];
    let sdz = [sd1, sd2];
    let sx = 0;

    let ch1 = [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0];
    let ch2 = [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0];
    let chz = [ch1, ch2];
    let cx = 0;

    let cpdz = [16, 23, 40, 1, 30];
    let cpx = 0;
  }

  run()
  {
    let bd = bdz[bx];
    if (count % 4 == 3) {
      bx = incr(bx, 0, len(bdz));
    }
    let sd = sdz[sx];
    if (count % 3 == 2) {
      sx = incr(sx, 0, len(sdz));
    }
    let ch = chz[cx];
    cx = incr(cx, 0, len(chz));

    set sbdrum:cp_delay_ms cpdz[cpx];
    cpx = incr(cpx, 0, len(cpdz));

    play_fn(0, bd, false);
    play_fn(3, sd, true);
    play_fn(2, ch, true);
  }
}


let regpattern1 = gen()
{
  setup()
  {
    let bd1 = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0];
    let bd2 = [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0];
    let sd1 = [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0];
    let sd2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0];
    let ch1 = [1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0];
    let ch2 = [1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0];
    let oh1 = [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0];
  }
  run()
  {
    let bd = bd1;
    let sd = sd1;
    if (count % 4 == 3) {
      bd = bd2;
    }
    if (count % 7 == 6) {
      sd = sd2;
    }

    if (count % 8 < 7) {
      play_fn(0, bd, false);
    }
    if (count % 13 < 12) {
      play_fn(3, sd, false);
    }
    let ch = ch2;
    if (count % 3 == 2) {
      ch = ch1;
    }
    play_fn(2, ch, true);
    if (count % 4 == 3) {
      play_fn(4, oh1, true);
    }
  }
}

let drumzblah_gen = gen()
{
  setup()
  {
    let hhz = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0];
    #let bdz = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0];
    let bd1 = [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0];
    let bd2 = [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0];
    let bdz = [bd1, bd2];
    let bx = 0;
    let snz = [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0];

    let fbz = [80, 60, 0, 90, 30];
    let fbx = 0;
    let fbdr = [23, 4, 7, 50, 100, 150];
    let fbrx = 0;

    let htz = [12, 8, 16, 12, 16, 12];
    let hx = 0;

  }
  run()
  {
    let bd = bdz[bx];
    bx = incr(bx, 0, len(bdz));
    play_fn(0, bd, false);
    play_fn(3, snz, false);
    let pp = 3840 / 12;
    for (let i = 0; i < htz[hx]; i++) {
      let sw = 0;
      let vl = 90 + rand(30);
      if (hhz[i] == 1) {
        if (i % 4 == 2) {
          sw = 40;
        }
        note_on_at(sbdrum, 2, i * pp + sw, vel = vl);
      }
    }
    hx = incr(hx, 0, len(htz));
    if (count % 2 == 0) {
      set sbdrum:hh_delay_ms fbdr[fbrx];
    }
    set sbdrum:cp_delay_ms fbdr[fbrx];
    set sbdrum:cp_delay_feedback_pct fbz[fbx];
    fbrx = incr(fbrx, 0, len(fbdr));
    fbx = incr(fbx, 0, len(fbz));
  }
}

# dx = SNURLP2 // add_fx(dx, "delay")
let skank_gen = gen()
{
  setup()
  {
    let rootz = [40, 45];
    #let rootz = [52, 57];
    #let rootz = [64, 69];
    let rx = 0;

    let delz = [0, 23, 423, 4, 23, 100, 300, 500];
    let dlx = 0;

    let dfb = [23, 4, 70, 90, 30];
    let dfx = 0;

    let delay_on = 1;

    let durz = [100, 200, 400, 300, 50, 10, 70];
    let drx = 0;

    #let algoz = [3, 4, 5, 6];
    let algoz = [4, 5];
    let ax = 0;

    let wavz = [0, 5];
    let wx = 0;

  }
  run()
  {
    let r = rootz[rx];
    rx = incr(rx, 0, len(rootz));
    let ntz = notes_in_chord(r, key);
    for (let i = 0; i < 16; i++) {
      if (i % 8 == 4) {
        note_on_at(dx, ntz, i * pp, dur = durz[drx]);
        if (count % 4 == 3) {
          set dx:fx0:ms delz[dlx] at=i*pp;
          dlx = incr(dlx, 0, len(delz));
        }
        if (count % 3 == 0) {
          set dx:fx0:fb dfb[dfx] at=i*pp;
          dfx = incr(dfx, 0, len(dfb));
          set dx:algo algoz[ax] at = i * pp;
          ax = incr(ax, 0, len(algoz));
        }
      }
    }
    set dx:o1wav wavz[wx];
    wx = incr(wx, 0, len(wavz));
    drx = incr(drx, 0, len(durz));
    if (count % 8 == 0) {
      delay_on = 1 - delay_on;
      set dx:fx0:active delay_on;
      note_on_at(dx, ntz, 2 * pp, dur = 90);
      note_on_at(dx, ntz, 3 * pp, dur = 125);
      note_on_at(dx, ntz, 10 * pp, dur = 150);
    }
  }
}

let snroolagh_gen = gen()
{
  setup()
  {
    let strtz = [3, 6, 9];
    let sx = 0;
    let delz = [100, 500, 600, 23, 4, 1000];
    let dlx = 0;
    let pat1 = [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0];
    let pat2 =  [1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0];
    let pat3 = [1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0];
    let patz = [pat1, pat2, pat3];
    let px = 0;
    let rotr = 2;
    let dfbz = [0, 30, 70, 90, 96];
    let dfx = 0;
  }
  run()
  {
    if (count % 4 == 3) {
      let pat = rotate(patz[px], rotr);
      px = incr(px, 0, len(patz));
      rotr = incr(rotr, 0, 8);
      for (let i = strtz[sx]; i < 16; i++) {
        if (pat[i] == 1) {
          set sbdrum:sd_delay_ms delz[dlx] at=i*pp;
          set sbdrum:sd_delay_feedback_pct dfbz[dfx] at=i*pp;
          dlx = incr(dlx, 0, len(delz));
          dfx = incr(dfx, 0, len(dfbz));
          note_on_at(sbdrum, 1, i * pp);
        }
      }
      sx = incr(sx, 0, len(strtz));
    }
  }
}

# load_preset(dx2, "buttz"); // WTOOF // elellelele // fboom // ptnchnn
# wahaio // UFO
let bassblah_gen = gen()
{
  setup()
  {
    let mel1 = [0, 16, 0, 0, 0, 21, 0, 0, 16, 0, 0, 0, 21, 0, 24, 0];
    let mel2 = [24, 0, 0, 0, 24, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0];
    #let mel2 = [0, 0, 19, 0, 0, 0, 0, 23, 0, 0, 35, 0, 0, 16, 0, 0];
    #let mel3 = [0, 17, 0, 0, 0, 0, 19, 0, 0, 17, 0, 0, 0, 0, 0, 0];
    let melz = [mel1, mel2];
    let mlx = 0;
    let mx = 0;
    let mmax = 3;
    let durz = [400, 150, 200, 400, 300, 400, 500, 250, 150];
    let drx = 0;

    #let algz = [0, 1, 3, 4, 2];
    let algz = [0, 1];
    let ax = 0;
    let ratz = [2];
    let rx = 0;

    let stopat = 8;

  }
  run()
  {
    let mel = melz[mlx];
    mlx = incr(mlx, 0, len(melz));


    if (count % 8 < 6) {
      for (let i = 0; i < stopat; i++) {
        if (mel[i] > 0) {
          note_on_at(dx2, mel[i], i * pp, dur = durz[drx]);
          drx = incr(drx, 0, len(durz));
        }
      }
      stopat = incr(stopat, 6, 16);
    } else {
      for (let i = 0; i < 16; i++) {
        stepper(dx2, mel, mx, i, 300, 27);
        mx = incr(mx, 0, mmax);
      }
      mmax = incr(mmax, 3, 16);
    }


    if (count % 7 == 0) {
      set dx2:algo algz[ax];
      ax = incr(ax, 0, len(algz));
    }

    if (count % 3 == 0) {
      set dx2:o1rat ratz[rx];
      rx = incr(rx, 0, len(ratz));
    }
  }
}

let lazblah_gen = gen()
{
  setup()
  {
    let frz = [700, 400];
    let frx = 0;
    let num_hitz = 4;
  }
  run()
  {
    if (count % 4 == 2) {
      let pz = rand_array(num_hitz, 0, 1);
      let thurd = 3840 / 4 * 3;
      let pp = 3840 / 4 / num_hitz;
      for (let i = 0; i < num_hitz; i++) {
        if (pz[i] == 1) {
          let now = thurd + i * pp;
          note_on_at(sbdrum, 8, now);
          set sbdrum:lz_freq frz[frx] at =  now;
          frx = incr(frx, 0, len(frz));
        }
      }
    }
  }
}

let reggaeblah_gen = gen()
{
  setup()
  {
    let pat1 = [0, 0, 24, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0];
    let pat2 = [0, 0, 0, 38, 0, 0, 0, 16, 0, 0, 0, 28, 0, 0, 0, 0];
    let pat3 = [0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0];
    let pat4 = [0, 16, 0, 0, 0, 0, 47, 0, 0, 0, 47, 0, 0, 0, 43, 0];

    # let mel1 = [0, 16, 0, 0, 0, 21, 0, 0, 16, 0, 0, 0, 21, 0, 24, 0];
    # let mel2 = [24, 0, 0, 0, 24, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0];

    #let patz = [pat1, pat2,pat3, pat4];
    let patz = [pat1, pat1, pat2, pat1, pat3, pat1, pat4];
    let px = 0;

    let velz = [120, 120, 127, 120, 127, 127];
    let vx = 0;
    let durz = [300, 400, 350, 400, 700, 270, 400];
    let drx = 0;

    let o2outz = [30, 35, 45, 55];
    let o2x = 0;
    let attz = [50, 100, 200];
    let atx = 0;
  }
  run()
  {
    set dx2:op1out 95;
    let pat = patz[px];
    px = incr(px, 0, len(patz));
    for (let i = 0; i < 16; i++) {
      if (pat[i] > 0) {
        let now = i * pp;
        note_on_at(dx2, pat[i], now, dur = durz[drx], vel = velz[vx]);
        drx = incr(drx, 0, len(durz));
        vx = incr(vx, 0, len(velz));

        set dx2:op2out o2outz[o2x] at=now;
        o2x = incr(o2x, 0, len(o2outz));

        set dx2:e2att attz[atx] at=now;
        atx = incr(atx, 0, len(attz));
      }
    }
  }
}

let play_song = gen()
{
  setup()
  {
  }
  run()
  {
    if (count % 32 < 16) {
      reggaeblah_gen();
      regpattern1();
    } else {
      bassblah_gen();
      regpattern2();
    }

    if (count % 6 < 4) {
      skank_gen();
    }
  }
}

let lzblah_gen = gen()
{
  setup()
  {
    let vfrz = [ 440];
    let vfx = 0;
  }
  run()
  {
    let third = 3840 / 4 * 3 + 50;
    let pp = 3840 / 4 / 3;
    for (let i = 0; i < 3; i++) {
      let now = third + pp * i + rand(100);
      set sbdrum:lz_freq vfrz[vfx] at = now;
      vfx = incr(vfx, 0, len(vfrz));
      note_on_at(sbdrum, 8, now + rand(100), vel = 80 + rand(27));

    }
  }
}

