
let inner_reset = false;

let inner_loop_gen = gen()
{
  setup()
  {
    let cntr = 0;
    let every_n = 3;
  }
  run()
  {

    if (inner_reset == true) {
      cntr = 0;
      inner_reset = false;
    }
    let val = 0;
    if (cntr % every_n == 0) {
      val = 1;
    }
    cntr++;
    return val;
  }
}

let move_every = false;

let outer_loop_gen = gen()
{
  setup()
  {
    let cntr = 0;
    let everyz = [11, 4, 7, 23];
    let ex = 0;
    let every_n = everyz[ex];
  }
  run()
  {
    let ret = 0;
    if (cntr % every_n == 0) {
      inner_reset = true;
      ret = 1;
    }
    cntr++;

    if (move_every == true) {
      ex = incr(ex, 0, len(everyz));
      move_every = false;
    }

    return ret;
  }
}
let pattern_gen = gen()
{
  setup()
  {
    let durz = [150, 300, 800, 1700, 650];
    let drx = 0;
    let velz = [100, 127, 100, 90, 100, 120, 120];
    let vx = 0;
  }
  run()
  {
    for (let i = 0; i < 16; i++) {
      outer_loop_gen();
      let should_fire = inner_loop_gen();
      if (should_fire == true) {
        note_on_at(sbdrum, 0, i * pp);
      }

    }
    if (count % 2 == 0) {
      move_every = true;
    }
  }
}

