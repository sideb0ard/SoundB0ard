let an = sample(TT-NOCERA/AHNAH.wav);
vol an 0.5;
let oh = sample(TT-NOCERA/OOHlong.wav);
let tic = sample(TT-NOCERA/TICt.wav);
let wu = sample(TT-NOCERA/WUMP.wav);
let bad = sample(TT-NOCERA/badum.wav);
let dd = sample(TT-NOCERA/dudam.wav);
let df = sample(TT-NOCERA/dumf.wav);
let gl= sample(TT-NOCERA/grainnyloop.wav);
let gl2 = sample(TT-NOCERA/grainyloop2.wav);
let kr = sample(TT-NOCERA/kickr.wav);
vol kr 0.5
let kkl = sample(TT-NOCERA/klickKICK.wav);
let bd = sample(TT-BANGO/kiCK.wav);
vol bd 0.4;
let ooh = sample(TT-NOCERA/ooh.wav);
let pah = sample(TT-NOCERA/pah.wav);
let sn = sample(TT-NOCERA/snarey.wav);
vol sn 0.5;
let sn2 = sample(TT-NOCERA/snarez.wav);
let stb = sample(TT-NOCERA/stab.wav);
let sumr = sample(TT-NOCERA/sumr.wav);
vol sumr 0.5;
let tme = sample(TT-NOCERA/timeee.wav);
vol tme 0.2;
let tom = sample(TT-NOCERA/tom.wav);
let tom2 = sample(TT-NOCERA/tom2.wav);
let tom3 = sample(TT-NOCERA/tom3.wav);
let tom4 = sample(TT-NOCERA/tom4.wav);
let tsck = sample(TT-NOCERA/tsck.wav);
vol tsck 0.4;
let ump = sample(TT-NOCERA/umPIAN.wav);
vol ump 0.3;
let wwhm = sample(TT-NOCERA/whhhum.wav);
let wumpa = sample(TT-NOCERA/wumpAH.wav);
vol wumpa 0.4;
let aigh = sample(TT-BANGO/AIIGH.wav);

let howya = sample(TT-BANGO/howYaALL.wav);

let kicksz = [kr, bd, bad, wumpa, wu ];

let uhn = sample(TT-LIMELIFE-RIGHTONTIME/uhstrlastbeat.wav);

let hatz = [tic, tsck, wwhm, uhn];
let pianoz = [ ump, tme, pah];

let tomz = [ sn, sn2, tom];

# let bet = loop(TT-LIMELIFE-RIGHTONTIME/beatloop.wav); add_fx(bet, "decimate");

let kickrr = gen()
{
  setup()
  {
    let arr_sizes = [4, 8, 8, 4, 2];
    let kick_idx = 0;
    let kicks_num = 1;
    let kicks_max = len(kicksz);
    let pitch_idx = 0;
    let pitch_val = 1;
  }

  run()
  {

    if (count % 2 == 0 ) {
      set bd:pitch 2;
    } else {
      set bd:pitch 1;
    }
    if (count % 3 == 0 ) {
      set kr:pitch 2;
      set bet:scramble 1;
    } else {
      set kr:pitch 1;
    }

    set bet:on 1;
    if (count % 4 == 0) {
      #puts("OD$!")
      set bet:stutter 1;
    } else {
      if (count % 7 == 0) {
        let rh = rand_beat();
        play_array(bet, invert(rh));
        for (i = 0; i < len(rh); ++i) {
          note_on_at(kicksz[kick_idx], 1, i*pp);
          kick_idx = incr(kick_idx, 0, kicks_num);
        }
      } else {
        let pat_len = arr_sizes[rand(len(arr_sizes))];
        let inc = 3840 / pat_len;
        for ( i = 0 ; i < pat_len ;  ++i ) {
          let randy = rand(10);
          if ( randy < 6 ) {
            note_on_at(kicksz[kick_idx], 1, i*inc)
          }
          if (randy < 3) {
            kick_idx = incr(kick_idx, 0, kicks_num)
          }
        }
      }
    }
    kicks_num = incr(kicks_num, 1, kicks_max + 1);
  }
}

let nocera_hatz = gen()
{
  setup()
  {
    let arr_sizes = [16 ];
    let arr_idx = 0;
    let hatz_idx = 0;
    let len_hatz = 2;
  }

  run()
  {
    if (count % 2 == 0 ) {
      set tsck:pitch 2
    } else {
      set tsck:pitch 1
    }
    if (count % 3 == 0 ) {
      set tic:pitch 2
    } else {
      set tic:pitch 1
    }
    let arr = rand_array(arr_sizes[arr_idx], 0, len_hatz);
    arr_idx = incr(arr_idx, 0, len(arr_sizes));

    let inc = 3840 / len(arr);
    for ( i = 0 ; i < len(arr) ;  ++i ) {
      let randy = rand(10);
      if ( randy < 8 ) {
        note_on_at(hatz[hatz_idx], 1, i*inc);
      }
      if (randy < 6) {
        hatz_idx = incr(hatz_idx, 0, len_hatz):
      }
    }
    len_hatz = incr(len_hatz, 2, len(hatz));
  }
}

let nocera_tomz = gen()
{
  setup()
  {
    let bjz = [3, 5, 7];
    let bjx = 0;
    #let tom_idx = 0;
  }

  run()
  {

    let beat = bjork(bjz[bjx], 16);
    if (rand(100) > 80) {
      bjx = incr(bjx, 0, len(bjz));
    }
    perky(rotate(beat, 2), tomz);
    #rhythm = rotate(rhythm, 4);
    #for (i = 0; i < len(rhythm); ++i) {
      #  if (rhythm[i] == 1) {
        #    note_on_at(tomz[tom_idx], 1, i * pp);
        #    tom_idx = incr(tom_idx, 0, len(tomz));
        #  }
      #}

  }
}

let nocera_pianoz = gen()
{
  setup()
  {
    let beat = rand_beat();
  }

  run()
  {
    perky(beat, pianoz);

    if (count % 8 == 6) {
      beat = rand_beat();
    }
  }
}
#
#
let snarrr = gen()
{
  setup()
  {
    let snz = [sn, tme, sumr, an, aigh];
    let snx = 0;
    let snln = 1;
    let elz = [3, 5, 2, 7];
    let ex = 0;
    let dz = [10, 20, 50, 110, 130, 150, 50, 45];
    let dzx = 0;
  }

  run()
  {

    let beat = rotate(bjork(elz[ex], 16), 4);
    if (count % 4 == 0) {
      ex = incr(ex, 0, len(elz));
    }
    snln = incr(snln, 1, len(snz));

    for (i = 0; i < 16; ++i) {
      if (beat[i] == 1) {
        note_on_at(snz[snx], 1, i * pp, dur = dz[dzx], vel = 80 + rand(30));
        dzx = incr(dzx, 0, len(dz));
        snx = incr(snx, 0, snln);
      }
    }

    if (count % 8 == 7) {
      let ofs = rand(4);
      note_on_at(howya, 1, pp * (12 + ofs), vel=120, dur = dz[dzx]);
      dzx = incr(dzx, 0, len(dz));
    }
  }
}


let jip = sample(TT-PARTYPEOPLE/jip.wav);
let pa = sample(TT-PARTYPEOPLE/pa.wav);
let clng = sample(TT-MAW-ALRIGHTALRIGHT/clng2.wav);
let ja = sample(TT-MAW-ALRIGHTALRIGHT/ja.wav);
let jack = sample(TT-MAW-ALRIGHTALRIGHT/jackhit.wav);

let snarrr22 = gen()
{
  setup()
  {
    let snz = [jip, pa, clng, ja, jack];
    let snx = 0;
    let elz = [3, 5, 2, 7];
    let ex = 0;
    let dz = [100, 110, 130, 150, 50, 45];
    let dzx = 0;
    let rotz= [1, 2, 4, 0, 8, 12];
    let rx = 0;
  }

  run()
  {

    if (count % 2 == 1) {
      let beat = rotate(bjork(elz[ex], 16), rotz[rx]);
      perky(beat, snz);
      rx = incr(rx, 0, len(rotz));
    }
    #if (count % 3 == 0) {
      #  cbeat(snz[snx]);
      #}
    if (count % 5 == 0) {
      ex = incr(ex, 0, len(elz));
    }
  }
}

