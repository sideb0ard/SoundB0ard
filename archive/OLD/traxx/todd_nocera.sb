#let an = sample(TT-NOCERA/AHNAH.wav)
#let oh = sample(TT-NOCERA/OOHlong.wav)
#let tic = sample(TT-NOCERA/TICt.wav)
#let wu = sample(TT-NOCERA/WUMP.wav)
#let bad = sample(TT-NOCERA/badum.wav)
#let dk = sample(TT-NOCERA/dryKICK.wav)
#let dd = sample(TT-NOCERA/dudam.wav)
#let df = sample(TT-NOCERA/dumf.wav)
#let gl= sample(TT-NOCERA/grainnyloop.wav)
#let gl2 = sample(TT-NOCERA/grainyloop2.wav)
#let hu = sample(TT-NOCERA/hatUH.wav)
#let hhh = sample(TT-NOCERA/hh.wav)
#let ka = sample(TT-NOCERA/kickAH.wav)
# vol ka 0.5
#let kh = sample(TT-NOCERA/kickISH.wav)
#let kr = sample(TT-NOCERA/kickr.wav)
#let kkl = sample(TT-NOCERA/klickKICK.wav)
#let ohh = sample(TT-NOCERA/oh.wav)
#let ooh = sample(TT-NOCERA/ooh.wav)
#let pah = sample(TT-NOCERA/pah.wav)
#let pai = sample(TT-NOCERA/piano.wav)
#let pai2 = sample(TT-NOCERA/piano2.wav)
#let sn = sample(TT-NOCERA/snarey.wav)
#let sn2 = sample(TT-NOCERA/snarez.wav)
#let stb = sample(TT-NOCERA/stab.wav)
#let sumr = sample(TT-NOCERA/sumr.wav)
#let tkk = sample(TT-NOCERA/tick.wav)
#let tkr = sample(TT-NOCERA/tickr.wav)
#let tme = sample(TT-NOCERA/timeee.wav)
#let tom = sample(TT-NOCERA/tom.wav)
#let tom2 = sample(TT-NOCERA/tom2.wav)
#let tom3 = sample(TT-NOCERA/tom3.wav)
#let tom4 = sample(TT-NOCERA/tom4.wav)
#let tsck = sample(TT-NOCERA/tsck.wav)
#let tth = sample(TT-NOCERA/tth.wav)
#let um#p = sample(TT-NOCERA/umPIAN.wav)
#let woh = sample(TT-NOCERA/weeOOH.wav)
#let wwhm = sample(TT-NOCERA/whhhum.wav)
#let whhs = sample(TT-NOCERA/whhs.wav)
#let wumpa = sample(TT-NOCERA/wumpAH.wav)

let kicksz1 = [kh, ka] ;
# let kicksz1 = [kh, ka, dk, woh] ;
let kicksz2 = [tom, tom2, tom3];

let kicksz = kicksz1;
#let hatz = [hu, hhh, ohh, tkk, tkr, tth, whhs]
#let hatz = [tkk, tkr];
let hatz = [tkk, tkr, ohh];

#let pianoz = [pai, pai2];
let pianoz = [pai, pai2, woh];
#let piano_namez = ["pai", "pai2"];
let piano_namez = ["pai", "pai2", "woh"];

# let gr = grain(TT-NOCERA/grainnyloop.wav)
# addFx(gr, "reverb")
# p4 < osc 12 "1 100"  "set gr:idx %"
# p5 < osc 9 "20 90"  "set gr:fx0:wetmx %"



let kickrr = gen()
{
    setup()
    { 
      #let arr_sizes = [4, 8, 16, 16, 8, 12, 4, 16]
      let arr_sizes = [4, 8, 16]
      let kick_idx = 0
    }

    run()
    {
      let pat_len = arr_sizes[rand(len(arr_sizes))]
      let inc = 3840 / pat_len;
      for ( i = 0 ; i < pat_len ;  ++i ) {
        let randy = rand(10);
        if ( randy < 8 ) {
          noteOnDelayed(kicksz[kick_idx], 1, i*inc)
        }
        if (randy < 6) {
          kick_idx = incr(kick_idx, 0, len(kicksz))
        }
      }
     #let nom = rand(10);
     #if (nom > 7 ) {
     #  kicksz = kicksz2
     #} else {
     #  kicksz = kicksz1
     #}
    }
}

let nocera_hatz = gen()
{
    setup()
    {
       let arr_sizes = [16 ]
       let arr_idx = 0;
       let hatz_idx = 0;
       let len_hatz = 2;
    }

    run()
    {
      let arr = rand_array(arr_sizes[arr_idx], 0, len_hatz)
      arr_idx = incr(arr_idx, 0, len(arr_sizes))

      let inc = 3840 / len(arr);
      for ( i = 0 ; i < len(arr) ;  ++i ) {
        let randy = rand(10);
        if ( randy < 8 ) {
          noteOnDelayed(hatz[hatz_idx], 1, i*inc)
        }
        if (randy < 6) {
          hatz_idx = incr(hatz_idx, 0, len_hatz)
        }
      }
      len_hatz = incr(len_hatz, 2, len(hatz) + 1)
    }
}

let nocera_pianoz = gen()
{
    setup()
    {
       let rhythm = ""
       let piano_idx = 0;
    }

    run()
    {
      rhythm = distrhythms()
      #puts("MA RHYTHM:", rhythm)
      rhythm = rotate(rhythm, 8)
      #puts("MA RHYTHM:", rhythm)
      let trhythm = ""
      for (i = 0; i < len(rhythm); ++i) {
        if (rhythm[i] == "1") {
           trhythm = trhythm + piano_namez[piano_idx];
        } else {
           trhythm = trhythm + rhythm[i];
        }
        piano_idx = incr(piano_idx, 0, len(pianoz));
      }
      #puts("MA TRHYTHM:", trhythm)
      return trhythm
    }
}


let snarrr = gen()
{
    setup()
    { 
    }

    run()
    {
       let nom = rand(10)
       let pat = ""
       if (nom < 4) {
         pat =  "[~ sn]*2";
       } 
       if (nom > 3 && nom < 7) {
         pat =  "[~ sn2]*2";
       }
       if (nom > 6) {
         pat = "[~ sn2] [~ sn*3]";
       }
       return pat
    }
}

# sound effects
# toms
#z piano
let rhythms = [
  #shiko
  "1 ~ ~ ~ 1 ~ 1 ~ ~ ~ 1 ~ 1 ~ ~ ~",
  #son
  "1 ~ ~ 1 ~ ~ 1 ~ ~ ~ 1 ~ 1 ~ ~ ~",
  #rumba
  "1 ~ ~ 1 ~ ~ ~ 1 ~ ~ 1 ~ 1 ~ ~ ~",
  #soukous
  "1 ~ ~ 1 ~ ~ 1 ~ ~ ~ 1 1 ~ ~ ~ ~",
  #gahu
  "1 ~ ~ 1 ~ ~ 1 ~ ~ ~ 1 ~ ~ ~ 1 ~",
  #bossa-nova
  "1 ~ ~ 1 ~ ~ 1 ~ ~ ~ 1 ~ ~ 1 ~ ~"
]

let distrhythms = gen()
{
  setup() {}

  run() {
    let idx = rand(len(rhythms))
    #puts("IDX is ", idx, " - pattern is: ", rhythms[idx])
    return rhythms[idx]
  }
}
