loadDir("TT-SWAN-LAKE/");
let blah_fn = fn()
{
}
let blah_fn = fn()
{
}

let ppn = 3840 / 16;

let pitchz = [ 1, 2, 0.7, 1, 2, 1.5, 1.2, 0.8];
let pitch_idx = 0;

let drift = 10;

vol luhsin 0.2;
vol inthe 0.3;
vol snp 0.4;
vol iiaie 0.4;


let bpm_gen = gen()
{
  setup()
  {
  }
  run()
  {
    if (count % 4 == 0) {
      bpm 150;
    }
    if (count % 7 == 0) {
      bpm 147;
    }
    if (count % 3 == 0) {
      bpm 140;
    }
  }
}

let bd_gen = gen()
{
  setup()
  {
    let bdz = [bd];
    let bd_idx = 0;
  }
  run()
  {
    if (count % 8 == 7) {
      let pat = distrhythms_int();

      for (i = 0; i < 16; ++i) {
        if (pat[i] == 1) {
          # noteOnDelayed(bd, 1, i * ppn);
          noteOnDelayed(bd, 1, i * ppn + drift);
          bd_idx = incr(bd_idx, 0, len(bdz));
        }
      }
      setPitch(bd, pitchz[pitch_idx]);
      setPitch(teya, pitchz[pitch_idx]);
    } else {
      if ( count % 7 == 0) {
        # nutting
        drift = drift + 7;
        if (drift > 74) {
          drift = rand(13);
        }
      } else {
        for ( i = 0 ; i < 16; ++i) {
          if (i % 4 == 0) {
            noteOnDelayed(bd, 1, i * ppn);
            #noteOnDelayed(bd, 1, i * ppn + drift);
            if (count % 6 == 0) {
              noteOnDelayed(teya, 1, i * ppn);
              noteOnDelayed(teya, 1, i * ppn + drift);
            }
          }
        }
      }
    }
  }
}


let hh_gen = gen()
{
  setup()
  {
  }
  run()
  {
    if (count % 3 == 0) {
      for (i = 0; i < 16; ++i) {
        if (i % 3 == 2) {
          noteOnDelayed(hh, 1, ppn * i);
          noteOnDelayed(hh, 1, ppn * i * i);
        }
      }
    }
    if (count % 4 == 0) {
      for (i = 0; i < 16; ++i) {
        noteOnDelayed(hh, 1, ppn * i);
      }
      setPitch(hh, pitchz[pitch_idx]);
      pitch_idx = incr(pitch_idx, 0, len(pitchz));
    }
  }
}


let perk_gen = gen()
{
  setup()
  {
    let perx = [iitn, shot, snkt, et, tn];
    let num_spaces = 2;
    let patz = rand_array(16, 0, 4);
  }
  run()
  {
    for (i = 0; i < 16; ++i) {
      if (patz[i] < len(perx)) {
        noteOnDelayed(perx[i], 1, i * ppn);
        noteOnDelayed(perx[i], 1, i * ppn + drift);
      }
    }

    if (count % 3 == 0) {
      patz = rand_array(16, 0, len(perx) + num_spaces);
      num_spaces = incr(num_spaces, 1, 7);
      #  # puts("Spaces:", num_spaces, patz);
    }
  }
}

let bass_gen = gen()
{
  setup()
  {
    let patz = distrhythms_int();
    let bassz = [dub, uhh, et, spinback];
    let bass_idx = 0;
  }
  run()
  {
    if (rand(10) > 4) {
      patz = rotate(patz, 4);
      for (i = 8 ; i < 16; ++i) {
        bass_idx = incr(bass_idx, 0, len(bassz));
        if (rand(10) > 7) {
          noteOnDelayed(bassz[bass_idx], 1, i * ppn);
        } else {
          if (patz[i] == 1) {
            noteOnDelayed(bassz[bass_idx], 1, i * ppn);
          }
        }
        setPitch(bassz[bass_idx], pitchz[pitch_idx]);
      }
      patz = rotate(patz, 2);
      for (i = 7 ; i < 16; ++i) {
        bass_idx = incr(bass_idx, 0, len(bassz));
        if (rand(10) > 7) {
          noteOnDelayed(bassz[bass_idx], 1, i * ppn);
        } else {
          if (patz[i] == 1) {
            noteOnDelayed(bassz[bass_idx], 1, i * ppn);
            noteOnDelayed(bassz[bass_idx], 1, i * ppn + drift);
          }
        }
      }
      if (count % 7 == 0) {
        patz = distrhythms_int();
      }
    }
  }
}

let bazz_gen = gen()
{
  setup()
  {
    let patz = distrhythms_int();
    #let bassz = [iiaie, oow, luu, intro];
    let bassz = [perc, snp, inthe, luhsin, vm];
    let bass_idx = 0;
  }
  run()
  {
    if (rand(10) > 4) {
      patz = rotate(patz, 4);
      for (i = 8 ; i < 16; ++i) {
        bass_idx = incr(bass_idx, 0, len(bassz));
        if (rand(10) > 7) {
          noteOnDelayed(bassz[bass_idx], 1, i * ppn);
        } else {
          if (patz[i] == 1) {
            noteOnDelayed(bassz[bass_idx], 1, i * ppn);
          }
        }
        setPitch(bassz[bass_idx], pitchz[pitch_idx]);
      }
      patz = rotate(patz, 2);
      for (i = 7 ; i < 16; ++i) {
        bass_idx = incr(bass_idx, 0, len(bassz));
        if (rand(10) > 7) {
          noteOnDelayed(bassz[bass_idx], 1, i * ppn);
        } else {
          if (patz[i] == 1) {
            noteOnDelayed(bassz[bass_idx], 1, i * ppn);
            noteOnDelayed(bassz[bass_idx], 1, i * ppn + drift);
          }
        }
      }
      if (count % 7 == 0) {
        patz = distrhythms_int();
      }
    }
  }
}

let snbazz = gen()
{
  setup()
  {
    let snzz = [nzsn, sn, beepsn, intro];
    let sn_idx = 0;
    let third = ppn / 3;
  }
  run()
  {
    setPitch(sn, pitchz[pitch_idx]);
    if (count % 3 == 0 ) {
      for (i = 0; i < 16; ++i) {
        if (i == 4 || i == 12) {
          if (rand(100) > 30 ) {
            noteOnDelayed(snzz[sn_idx], 1, i * ppn);
            if ( i == 12 && rand(100) > 50) {
              noteOnDelayed(snzz[sn_idx], 1, i * ppn + third*1);
              noteOnDelayed(snzz[sn_idx], 1, i * ppn + third*2);
              sn_idx = incr(sn_idx, 0, len(snzz));
              setPitch(snzz[sn_idx], pitchz[pitch_idx]);
            }
          }
        }
      }
    }
  }
}

let iii_gen = gen()
{
  setup()
  {
    let smapz = [iiaie, doung, ieye];
    let smidx = 0;
  }
  run()
  {
    let patz= rand_array(16, 0, 7);
    for (i = 0; i < 16; ++i) {
      if (patz[i] == 1 && i % 2 == 0) {
        noteOnDelayed(smapz[smidx], 1, i * ppn);
        smidx = incr(smidx, 0, len(smapz));
      }
    }
    setPitch(smapz[smidx], pitchz[pitch_idx]);
  }
}


let melod_gen = gen()
{
  setup()
  {
    let pitchz = [1, 1, 1.5, 2, 1, 2, 0.7];
    let pidx = 0;
    let pat = distrhythms_int();
  }
  run()
  {
    if (count % 3 == 0) {
      for (i = 0; i < 16; ++i) {
        if (pat[i] == 1) {
          setPitch(bass2, pitchz[pidx], i * ppn);
          if (rand(10) > 3) {
            pidx = incr(pidx, 0, len(pitchz));
          }
          noteOnDelayed(bass2, 1, i * ppn);
        }
      }
    }
    if (count % 8 == 0) {
      pat = distrhythms_int();
    }
  }
}


let play_pat = fn(pat, ppn, offset)
{
  for (i = 0; i < 16; ++i) {
    if (pat[i] == 1) {
      #puts(i*ppn + offset);
      noteOnDelayed(bd, 1, i*ppn + offset);
      # if (count % 3 == 0 && count > 24) {
        #   noteOnDelayed(nzsn, 1, i*ppn + offset);
        #   if (rand(10) > 5) {
          #     noteOnDelayed(bass2, 1, i*ppn + offset);
          #   }
        # }
    }
  }
}

let haf_gen = gen()
{
  setup()
  {
    let pat = distrhythms_int();
  }
  run()
  {
    if (count % 8 == 7) {
    } else {
      let div = count % 4 + 1;
      let pp = ppn / div;
      let offset_multi = 3840 / div;
      for (i = 0; i < div; ++i) {
        let offset = i * offset_multi;
        play_pat(pat, pp, offset);
      }

      if (count % 7 == 0) {
        pat = distrhythms_int();
      }
    }
  }
}
