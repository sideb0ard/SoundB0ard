#let bd = sample(TT-BANGO/kickPHAT.wav);
# let laf = grain(TT-BANGO/laughLOOP.wav);
let samp = sample(TT-BANGO/kickFLUTE.wav);
let bd3 = sample(TT-BANGO/kickISH2.wav);
let bd2 = sample(TT-BANGO/kickFLUTE.wav);
let bd1 = sample(TT-BANGO/kickPHAT.wav);
let bd4 = sample(TT-BANGO/kickISH.wav);
let sn = sample(TT-BANGO/snare.wav);

let bdeq = gen()
{
  setup()
  {
    let samp_idx = 0
      let samplez = [bd1, bd2, bd3, bd4]
      let pitchz = [1, 2, 0.7, 1.2 ]
      let pitch_idx = 0
  }
  run()
  {
    let bd = samplez[samp_idx];
    samp_idx = incr(samp_idx, 0, len(samplez));

    set bd:pitch pitchz[pitch_idx];
    pitch_idx = incr(pitch_idx, 0, len(pitchz));
  }
}


#let nmapr = gen()
#{
#  setup()
#  {
#    let notes = gimmeNotes();
#  }
#  run()
#  {
#    let rhythm = "";
#    for (i = 0; i < len(pat); ++i)
#    {
#      puts("PAT[", i, "] is ", pat[i]);
#      if (notes[pat[i]])
#      {
#        #puts("MAPPED TO ", mmmap[pat[i]]);
#        let numz = rand(4) + 1;
#        rhythm = rhythm + notes[pat[i]] + "*" + numz;
#      }
#      rhythm = rhythm + " ";
#     }
#    return rhythm;
#  }
#}
#
# # p2 < every 3 "1"  "pat = reverse(pat)"
# # p3 < every 4 "1"  "pat = rotate(pat, 3)"
# # p4 < every 8 "1"  "pat = randy_array(16, 0, 2)"
# # p5 < every 7 "1"  "pat = randy_array(8, 0, 2)"
# # p6 < every 13 "1"  "pat = randy_array(11, 0, 2)"
#
let mapr = gen()
{
  setup()
  {
    let mmmap = ["bd", "cp", "sn"];
  }
  run()
  {
    let rhythm = "";
    for (i = 0; i < len(pat); ++i)
    {
      #puts("PAT[", i, "] is ", pat[i]);
      if (mmmap[pat[i]])
      {
        #puts("MAPPED TO ", mmmap[pat[i]]);
        rhythm = rhythm + mmmap[pat[i]];
      }
      rhythm = rhythm + " ";
    }
    return rhythm;
  }
}
#
# let synco = gen()
# {
#   setup()
#   {
#     let bd_count = 11;
#     let bd_max = 13;
#   }
#
#   run()
#   {
#      let rhythm = "[bd*"
#      let sn_count = bd_count - 1;
#      if (sn_count == 0) { sn_count = 1;}
#      rhythm = rhythm + bd_count + "] sn*" + sn_count;
#      bd_count = incr(bd_count, 1, bd_max);
#      # if (count % 7 == 0) {
#      #   return reverse(rhythm);
#      # }
#      return rhythm
#   }
# }
#
#
# let todd1 = gen()
# {
#     setup()
#     {
#       let melody = gimmeNotes()
#       let melody_repeat = 1
#       let melody_repeat_counter = 1
#
#       let rhythm = distrhythms()
#       puts("RHYTHM IS ", rhythm)
#       let rhythm_counter = 3;
#       let rhythm_counter_max = 7;
#     }
#
#     run()
#     {
#       melody = gimmeNotes()
#       if ( count % 4 == 0 )
#       {
#         rhythm = distrhythms();
#       }
#       let brak = 0;
#       if (count % 3 == 0) {
#         #puts("DOING MA THANG");
#         brak = 1;
#       }
#
#       let pattern = apply_melody_to_rhythm(melody, rhythm, (count % 3) + rhythm_counter, brak);
#
#       rhythm_counter = incr(rhythm_counter, 3, rhythm_counter_max)
#
#       return pattern
#     }
# }
# #
# #
# let apply_melody_to_rhythm = fn(melody, rhythm, num_times, brak)
# {
#     let pattern = ""
#     let melody_len = len(melody);
#     let melody_idx = 0;
#     let num_times_idx = 0
#
#
#     for (i = 0; i < len(rhythm); ++i)
#     {
#        if (rhythm[i] == "1")
#        {
#           let addition =  melody[melody_idx] + "*" + num_times;
#           if (brak == 1  && i != 0)
#           {
#             brak = 0;
#             let wee = get_four_beat();
#             addition = "[" + apply_melody_to_rhythm(melody[melody_idx], wee, 1, 0) + "]";
#           }
#
#           if (rand(10) > 8) {
#        addition = melody[melody_idx] + "(3,8)"
#           }
#
#           pattern = pattern + addition;
#
#           if ( count % 2 == 0 ) {
#             melody_idx = incr(melody_idx, 0, melody_len);
#           }
#        } else {
#           pattern = pattern + rhythm[i]
#        }
#     }
#     if (count % 3 == 0) {
#       return pattern + rotate(pattern, 4)
#     }
#     return pattern;
# }
#
# let get_four_beat = fn()
# {
#     let rhythm = distrhythms()
#     rhythm = rotate(rhythm, count % 4);
#     let wee_pattern = ""
#
#     for (i = 0; i < len(rhythm)/4; ++i)
#     {
#        wee_pattern = wee_pattern + rhythm[i];
#     }
#     return wee_pattern;
# }
# let higen = gen()
# {
#     setup()
#     {
#        let skip_prob = 3
#        let hat_probs = [90, 80, 70, 60, 10]
#        let hat_prob_idx = 0
#        let hat_prob_num = 2
#     }
#
#     run()
#     {
#         if (count % hat_prob_num == 0) {
#           hat_prob_idx = incr(hat_prob_idx, 0, len(hat_probs));
#         }
#         let rhythm_string = ""
#
#         for (i = 0; i < 16; ++i)
#         {
#             let prob = rand(100)
#             if (prob < hat_probs[hat_prob_idx])
#             {
#                 if (prob < skip_prob) {
#                    rhythm_string = rhythm_string + "[ ~ ";
#                 }
#                 rhythm_string = rhythm_string + "1 ";
#                 if (prob < skip_prob) {
#                    rhythm_string = rhythm_string + "] ";
#                 }
#             }
#             else
#             {
#                 rhythm_string = rhythm_string + "~ "
#             }
#         }
#         return rhythm_string
#
#     }
# }
#
# let sngen = gen()
# {
#     setup()
#     {
#         let beat_probability = [0, 90, 0, 90];
#
#     }
#
#     run()
#     {
#
#         let rhythm_string = "";
#         for (i = 0; i < 4; ++i)
#         {
#             let prob = rand(100)
#             if (prob < beat_probability[i])
#             {
#                   if ( prob < 10)
#                   {
#                     rhythm_string = rhythm_string + "1(3,5) ";
#                   }
#                   else {
#                     rhythm_string = rhythm_string + "1 ";
#                    }
#             }
#             else
#             {
#               rhythm_string = rhythm_string + "~ "
#             }
#         }
#         return rhythm_string
#     }
# }
#
# let th_switch = gen()
# {
#     setup()
#     {
#          # let ths = [th1, th2]
#          th = th1
#          let th_idx = 0;
#          let th_num = 3;
#     }
#
#     run()
#     {
#
#         th = ths[th_idx]
#         # puts("COUNT:", count, " TH", th_idx, " LEN:", len(ths))
#         if (count % th_num == 0) {
#           th_idx = incr(th_idx, 0, len(ths));
#           #puts("BOOT YA:", th_idx);
#         }
#     }
# }
#
# let hatpitch = gen()
# {
#    setup() {
#      # let hhz = [hh, ch];
#      let id = 1;
#      let pt = 1;
#    }
#    run()
#    {
#      if (count % 2 == 0)
#      {
#        mhh = hhz[id];
#        set mhh:pitch pt;
#        id = incr(id,0,len(hhz));
#        if (count % 3 == 0)
#        {
#          pt = incr(pt,1,3);
#        }
#      }
#    }
# }
# #
# let drumgen = gen()
# {
#     setup()
#     {
#         let beat_probability = [90, 5, 5, 90,
#                                 4, 20, 80, 5,
#                                 90, 20, 50, 60,
#                                 5, 30, 60, 9];
#
#     }
#
#     run()
#     {
#
#         let rhythm_array = []
#
#         for (i = 0; i < 16; ++i)
#         {
#             let prob = rand(100)
#             if (prob < beat_probability[i])
#             {
#               rhythm_array = push(rhythm_array, "1");
#             }
#             else
#             {
#               rhythm_array = push(rhythm_array, "~");
#             }
#         }
#
#         let notes  = gimmeNotes()
#         let notes_len = len(notes)
#         let new_rhythm = ""
#         let open_bracket = false;
#         for  (i = 0; i < 16; ++i)
#         {
#           if (i == 4 || i == 8 || i == 12) {
#             new_rhythm = new_rhythm + " ] ";
#           }
#           if (i % 4 == 0) {
#             new_rhythm = new_rhythm + "[ ";
#           }
#
#           if (rhythm_array[i] == "1")
#           {
#             if (i % 4 == 0 && ( rand(10) < 4 )) {
#               new_rhythm = new_rhythm + notes[rand(notes_len)] + "(5,8)";
#               i = i + 3;
#             } else {
#               new_rhythm = new_rhythm + notes[rand(notes_len)] + " ";
#             }
#           }
#           else
#           {
#             new_rhythm = new_rhythm + "~ ";
#           }
#
#           if (i == 15) {
#             new_rhythm = new_rhythm + " ] ";
#           }
#         }
#         return new_rhythm;
#     }
# }
# #
