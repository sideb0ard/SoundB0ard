let bd = sample(kicks/technotronBD.aiff);
let tr = sample(perc/triangle.aiff);
let cp = sample(claps/mawClap.aiff);
let hh = sample(hats/chezHat.aiff);
let sn = sample(snrs/delayedDubSnar.aiff);

#load_dir("TT-NOCERA");



let blah_gen = gen()
{
  setup()
  {
    let pat = pattern("[ <bd(3,8) bd(5,8)>, < [~ sn]*2  [~ ~ sn ~]   >, ~ hh*2 ~ <tr(3,8) ~>  ]  ");
    #let pat = pattern("[ bd(3,8), [~ sn]*2 ]  ");
    #let sampz = [piano, piano2, badum, umPIAN, whhs, wumpAH];
    #let sx = 0;
    let rot = 3;
  }
  run()
  {

    let ep = eval_pattern(pat);
    if (count % 3 == 0) {
      ep = stutter(ep);
    }
    if (count % 7 == 0) {
      ep = rotate(pat, rot);
      rot = incr(rot, 0, 7);
    }
    play_array(ep);
    ##print("STITTER?");
  }
}

let snh_gen = gen()
{
  setup()
  {
    let pat = pattern("<43 44 47 12> <~ 44 34> <~ [~ 13]> < ~ ~ ~ 21>");
    #let pat = pattern("<23 24 27 12> <~ 24 24> <~ [2 ~ 13]> < ~ 23 21>");
    #let pat = riff(3);
    let rel = 100;
  }
  run()
  {
    set dx100:e1rel rel;
    set dx100:porta rel;
    rel = rel + 74;
    if (rel > 700) {
      rel = 374;
      play_array_over(dx100, pat, 3);
    }
    let ep = eval_pattern(pat);
    if (count % 3 == 0) {
      ep = stutter(ep);
      play_array_over(dx100, pat, 2);
    }
    if (count % 7 == 0) {
      ep = reverse(ep);
      play_array_over(dx100, ep, 4);
      play_array_over(mo, ep, 3);
      play_array_over(mo, pat, 3);
    }
    play_array(dx100, ep);
  }
}

