# set dx:algo 2
# p2 < osc 4 "75 95" "set dx:op2out %"
# p3 < osc 2 "20 95" "set dx:op3out %"
# p4 < osc 12 "0 73" "set dx:op4out %"

# p5 < osc 8 "0 15" "set dx:op4fb %"

# p2 # "0*4" sbdrum

# load_preset(dx, "fnacccx"); load_preset(dx2, "surgefizz2");
# load_preset(dx, "ZApzz"); load_preset(dx2, "surgefizz2");
# load_preset(dx, "oceanlap"); load_preset(dx2, "surgefizz2");

# load_preset(dx, "SLURXZZ"); load_preset(dx2, "quazzz");
# load_preset(dx, "rocktagon"); load_preset(dx2, "quazzz");
# add_fx(dx, "sidechain", sbdrum);
#occeanlap

# load_preset(dx, "fnacccx"); load_preset(dx2, "ZApzz");

# p2 < osc 7 "0 2.6" "set dx:o2det %"
# dx2 SNURLP

# WRRNGZ // B
let key = 11;

# szyataa // UNDg
# load_preset(dx, "szyataa"); load_preset(dx2, "slzurlp");
# load_preset(dx, "szyataa"); load_preset(dx2, "ZApzz");

# load_preset(dx, "mo_jazz"); load_preset(dx2, "drmrrr");

# ZApzz // uprt_piano // surgefizz2 // basss // narf // gnarrrrde

#  load_preset(dx, "WRRNGZ");
let blah_gen = gen()
{
  setup()  {
    let all_ntz = notes_in_key(key);
    #let ntz = [32, 34, 36, 37, 39, 41, 44];
    #let ntz = [32, 39, 36];
    let nx = 0;
    # [32, 34, 36, 37, 39, 41, 43, 44];
    let t = 474776834;
    let nexton = 0;
    let chmodz = [1, 1, 2, 0, 3];
    let chx = 0;
    let oct = 4;
  }
  run()
  {


    let start_now = now();

    let att_time = 0;
    let dec_time = 0;

    let ntz = up([all_ntz[0], all_ntz[4], all_ntz[5], all_ntz[3]], oct * 12);

    for (let i = 0; i < 3840; i++) {

      let cur_tick = start_now + i;

      let p = bits( ((t/4)>>(t/4))>>(t>>(t/8))|t>>2 );
      t++;
      if (cur_tick >= nexton) {
        let numz = numzFromBits(p);
        #print(numz);
        att_time = scale(numz[2], 0, 16, 5, 2500);
        dec_time = scale(numz[1], 0, 16, 10, 15000);
        #print("ATT TIME:", att_time, " DEC:" , dec_time);
        let playlen = 240 * (numz[3]+1);
        let chrd = notes_in_chord(ntz[nx], key, chmodz[chx]);
        chx = incr(chx, 0, len(chmodz));
        let op4Or2 = numz[3] < 8;
        if (op4Or2) {
          set dx:op4out 95 at = i;
          set dx:op2out 0 at = i;
          set dx:e4att att_time at = i;
          set dx:e4dec dec_time at = i;
        } else {
          set dx:op4out 0 at = i;
          set dx:op2out 95 at = i;
          set dx:e2att att_time at = i;
          set dx:e2dec dec_time at = i;
        }
        note_on_at(dx, chrd, i, dur = playlen * 0.9);
        nexton = cur_tick + playlen;
      }
      if (count % 4 == 0) {
        nx = incr(nx, 0, len(ntz));
        oct = incr(oct, 1, 5);
      }
    }
  }
}

let bassblah_gen = gen()
{
  setup()
  {
    # 36, 41, 48
    #let bassline = [36, 0, 0, 0,  36, 0, 36, 0,   43, 0, 0, 0,   48, 0, 0, 0];
    let bassline = [36, 0, 0, 0,  0, 0, 0, 0,   40, 0, 0, 0,   43, 0, 0, 0];
  }
  run()
  {
    for (let i = 0; i < 16; i++) {
      if (bassline[i] > 0) {
        note_on_at(dx2, bassline[i], i * pp);
      }
    }
  }
}

