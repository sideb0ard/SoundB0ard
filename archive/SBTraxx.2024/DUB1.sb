let key = 48;

# load_preset(dx, "ORGAN") ; load_preset(dx2, "CHUNKy")

let playblah_fn = fn(id, pat)
{
  for (let i = 0; i < len(pat); i++) {
    note_on_at(sbdrum, id, pat[i] * pp);
  }
}

let dblah_gen = gen()
{
  setup()
  {
    let bdz = [0, 4, 8, 12];
    let chz = [0, 1, 4, 8, 19, 12, 14];
    let ohz = [4];
    let cp = [8];

    set sbdrum:cp_eg_decay 100;
    set sbdrum:cp_eg_sustain1 1;
    set sbdrum:cp_eg_release 600;
  }
  run()
  {
    if (count % 30 < 29) {
      playblah_fn(2, chz);
    }
    if (count % 16 < 15) {
      playblah_fn(0, bdz);
    }
    if (count % 7 < 5) {
      playblah_fn(1, cp);
    }
    if (count % 8 < 6) {
      playblah_fn(3, cp);
      playblah_fn(4, ohz);
    }

  }
}

let bassblah_gen = gen()
{
  setup()
  {
    let mel1 =  [28, 0, 0, 32, 0, 0, 0, 40, 0, 52, 0, 0, 0, 0, 0, 0];
    let mel2 =  [0, 0, 44, 0, 32, 0, 40, 0, 0, 0, 35, 0, 40, 0, 35, 0];

    let durz = [300, 500, 600, 100, 570, 480, 400];
    let drx = 0;

    let velz = [127, 120, 120, 100, 90, 90, 120, 127, 120];
    let vx = 0;
  }
  run()
  {
    let mel = mel1;
    if (count % 4 == 3) {
      mel = mel2;
    }
    if (count % 17 == 0) {
      mel = down(mel, 12);
    }

    for (let i = 0; i < 16; i++) {
      if (mel[i] > 0) {
        let offset = 60;
        if (i % 2 == 0) {
          offset = 0;
        }
        note_on_at(dx, mel[i], i * pp + offset, dur = durz[drx], vel = velz[vx]);
        drx = incr(drx, 0, len(durz));
        vx = incr(vx, 0, len(velz));
      }
    }

  }
}

let bassblah2_gen = gen()
{
  setup()
  {
    let mel1 =  [40, 0, 0, 0, 0, 0, 33, 0, 32, 0, 0, 0, 0, 28, 0, 0];
    let mel2 =  [44, 0, 0, 44, 0, 0, 40, 0, 0, 28, 0, 0, 0, 28, 0, 0];

    let durz = [300, 500, 600, 970, 480, 400];
    let drx = 0;

    let velz = [127, 120, 120, 127, 120];
    let vx = 0;
  }
  run()
  {
    let mel = mel1;
    if (count % 4 == 3) {
      mel = mel2;
    }

    for (let i = 0; i < 16; i++) {
      if (mel[i] > 0) {
        let offset = 30;
        if (i % 2 == 0) {
          offset = 0;
        }
        note_on_at(dx, mel[i], i * pp + offset, dur = durz[drx], vel = velz[vx]);
        drx = incr(drx, 0, len(durz));
        vx = incr(vx, 0, len(velz));
      }
    }

  }
}

let dabass_gen = gen()
{
  setup()
  {
  }
  run()
  {
    if (count % 16 < 8) {
      bassblah_gen();
    } else {
      bassblah2_gen();
    }
  }
}

# mo // kerriz
# load_preset(mo, "kerriz"); add_fx(mo, "delay");
let momelblah_gen = gen()
{
  setup()
  {
    let chrdz = [52, 57];
    let chx = 0;

    let sncz = [1, 2, 3];
    let sx = 0;

    let detz = [0, 10, 7, 13, 20, 23];
    let dtx = 0;
  }
  run()
  {

    if (count % 8 < 6) {
      let chrd = notes_in_chord(chrdz[chx], key);
      chx = incr(chx, 0, len(chrdz));
      note_on_at(mo, chrd, 4 * pp);
      note_on_at(mo, chrd, 12 * pp);
    }
  }
}

let melllblah_gen = gen()
{
  setup()
  {
    # let dchord = [62, 65, 69];
    # let fchord = [53, 57, 60];
    # let achord = [57, 60, 64];
    # let echord = [52, 55, 59];
    # Key of C - D, F, A, E
    let prog = [62, 53, 57, 52];
    let px = 0;
    let bjz = [7, 5, 7, 5, 7, 5, 7, 2, 11, 3];
    let bx = 0;
    let lower2out = 20;
    let upper2out = 99;
    let odiff = upper2out - lower2out;
    let oinc = odiff / 3840;

  }
  run()
  {
    #for (let i = 0; i < 3840; i++) {
      #  set dx:op2out lower2out + (i * oinc) at=i;
      #}

    let beat = bjork(bjz[bx], 16);
    bx = incr(bx, 0, len(bjz));
    let chrd = notes_in_chord(prog[px], key, 1);
    px = incr(px, 0, len(prog));
    #print(chrd);
    for (let i = 0; i < 16; i++) {
      if (beat[i] == 1) {
        note_on_at(dx, chrd, i * pp);
      }
    }
  }
}

# dx2 - CHUNKy
let comelblah_gen = gen()
{
  setup()
  {
    # F A E
    #[41, 45, 40];
    #[45, 50];
    let bjz = [5, 3, 7, 3, 5];
    let bjx = 2;
  }
  run()
  {
    if (count % 4 < 2) {
      note_on_at(dx2, 41, 0);
      note_on_at(dx2, 41, 2 * pp);
      note_on_at(dx2, 45, 4 * pp);
      note_on_at(dx2, 40, 8 * pp, dur = 500);
    } else {
      let beat = bjork(6, 16);
      let bx = 0;
      for (let i = 0; i < 16; i++) {
        if (beat[i] == 1) {
          let nt = 45;
          if (bx == 3 || bx == 4) {
            nt = 50;
          }
          note_on_at(dx2, nt, i * pp);
          bx = incr(bx, 0, 6);
        }
      }
    }

    if (count % 7 == 0) {
      let bj = bjork(bjz[bjx], 16);
      for (let i = 0; i < 16; i++) {
        if (bj[i] == 1) {
          note_on_at(dx2, 55, i * pp, dur = 100);
        }
      }
    }
  }
}

