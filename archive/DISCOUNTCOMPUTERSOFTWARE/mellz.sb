
let StepDatPattern = fn(pat, base_key, range_of_melody)
{
  let nots = notes_in_key(base_key, 1);
  let cur_val = 0;
  for (i = 0; i < len(pat); ++i) {
    if (pat[i] == 1)  {
      pat[i] = nots[cur_val % range_of_melody % len(nots)];
      if (rand(100) > 90) {
        pat[i] = 0;
      }
      if (rand(100) > 95) {
        if (i > 0) {
          pat[i - 1] = pat[i];
          pat[i] = 0;
        }
      }
      cur_val = cur_val + rand(range_of_melody);
      if (rand(100) > 70) {
        cur_val = cur_val - rand(4);
        if (cur_val < 0) {
          cur_val = base_key;
        }
      }
    }
  }
  return pat;
}

let GenMellerdy = fn(length_of_melody, base_key, range_of_melody)
{
  let third_of_melody = length_of_melody / 3;
  let len_section_one = floor(third_of_melody + rand(third_of_melody));
  let len_section_two = floor((length_of_melody - len_section_one) / 2);
  let len_section_three = (length_of_melody - len_section_one) - len_section_two;

  let steps_section_one = 3 + rand(2);
  let section_one = bjork(steps_section_one, len_section_one);

  section_one = StepDatPattern(section_one, base_key, range_of_melody);

  let section_two_one = bjork(1 + rand(2), len_section_two);
  section_two_one = StepDatPattern(section_two_one, base_key, range_of_melody);
  let section_two_two = bjork(1 + rand(3), len_section_three);
  section_two_two = StepDatPattern(section_two_two, base_key, range_of_melody);

  return section_one + section_two_one + section_two_two;

}

# let cee = loop(dloops2/ceecveeBeat.wav): set cee:len 2

let base_key = 19;
# dx = fnord0 // tigerking
# WARSND // FWUMPE // SNDCLNR // WHIRZ
let jam = sample(voices/jamhot.wav);
let melblah_gen = gen()
{
  setup()
  {
    #let base_key = 13;
    #let base_key = 14;
    let num_nots = 1;
    let mel1 = GenMellerdy(64, base_key, num_nots);
    let d = 50;
    let djam = 1350;
    let swg = 10;
  }
  run()
  {
    if (count % 4 == 0) {
      mel1 = GenMellerdy(64, base_key, num_nots);
      set deilla:stutter 1;

      num_nots = incr(num_nots, 1, 3);
    }

    if (count % 8 < 5) {
      let pp = 3840 / len(mel1);
      for (i = 0; i < len(mel1); ++i) {
        let v = 100 + rand(27);
        let offs = swg;
        if (i % 2 == 0) {
          offs = 0;
        }
        if (i % 4 == 1) {
          v = 127;
        }
        if (mel1[i] > 0) {
          note_on_at(dx, mel1[i], i * pp + offs, dur = d, vel = v);
        }
      }
      d = d + 50;
      if (d > 550) {
        d = 150;
      }
    } else {
      note_on_at(jam, 1, 12 * pp, dur = djam);
      djam = jdam + 550;
      if (djam > 3000) {
        djam = 500;
      }
      #  solo(cee, at=14*pp);
    }
  }
}

# dx2 -= wurrop // skirissh // rSQer // quazzz // tigerking
let CompMel= gen()
{
  setup()
  {
    #let beat = rand_beat() * 2;
    let beat = rand_beat();
    let mel = StepDatPattern(beat, base_key - 12, 3);
    let d = 140;
  }
  run()
  {
    if (count % 8 > 4) {
      let pp = 3840 / len(beat);
      for (i = 0; i < len(mel); ++i) {
        if (mel[i] > 0) {
          note_on_at(dx2, mel[i], i * pp, dur = d);
        }
      }
    }
    if (count % 8 == 0) {
      #beat = rand_beat() * 2;
      beat = rand_beat();
    }
    if (count % 4 == 0) {
      mel = StepDatPattern(beat, base_key - 12, 3);
      d = d + 50;
      if (d > 350) {
        d = 40;
      }
    }
  }
}

# let crn = loop(dloops2/cruncN.wav); set crn:len 2;
# let slb = loop(dloops2/SOULbeat.wav); add_fx(slb, "distort");

let dablah_gen = gen()
{
  setup()
  {
  }
  run()
  {
    if (count % 4 == 3) {
      set slb:stutter 1;
      solo(slb, at=14*pp);
    }
    if (count % 8 == 7) {
      set crn:stutter 1;
      solo(crn, at=14*pp);
    }
  }
}

