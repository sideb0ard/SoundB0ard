# let sb = loop(JUNALGOGZ/squelBEAT2.wav); set sb:len 2
# let trm = loop(JUNALGOGZ/tremLO.wav); set trm:len 4
# let ab1 = loop(JUNALGOGZ/auchBEa2.wav); set ab1:len 2
# let blak = loop(JUNALGOGZ/blackMARKET.wav)
let blah_gen = gen()
{
  setup()
  {
    let poz = [1, -1, 1, 0, 1, -1, 1, -1];
    let px = 0;
    let numsixteenth = 32;
    let sixteenthcount = 0;
  }
  run()
  {
    if (count % 2 == 0) {
      set mixer:xfader:xpos poz[px] at=i*pp;
      px = incr(px, 0, len(poz));
    }

    if (count % 8 == 6) {
      set sb:stutter 1;
    } else {
      if (count % 5 == 3) {
        set trm:stutter 1;
      }
    }


    if (count % 4 == 3) {
      set ab1:stutter 1;
    } else {
      if (count % 2 == 0) {
        set blak:stutter 1;
      }
    }
  }
}

# let delz = loop(JUNALGOGZ/DELAz.wav); set delz:len 2
# perp = drum(); Srqttx
# warp = electrHH ? PIPEBLING  MFFF heheh

let ddxblah_gen = gen()
{
  setup()
  {
    let t = 47705;
    let mx = 0;
    let maxx = 4;
  }
  run()
  {
    if (count % 3 == 0) {
      set delz:scramble 1;
      #set delz:reverse 1;
      set ab1:reverse 1
    }
    if (count % 4 == 0) {
      set delz:stutter 1;
    }
    if (count % 8 == 0) {
      # let p = bits( (6473<<t^13) * 14 & t);
      # let p = bits( t<<((t>>1|t>>8)^(t>>13)) );
      let p = bits( ((t/4)>>(t/4))>>(t>>(t/8))|t>>2);
      ++t;
    }
    for (i = 0; i < 16; ++i) {
      stepper(warp, combinor(p, [47]), mx, i, 400);
      mx = incr(mx, 0, maxx)
    }
    for (i = 0; i < 16; ++i) {
      #stepper(perp, combinor(invert(p), [47]), mx, i, 400);
      stepper(perp, combinor(invert(p), [35]), mx, i, 400);
      mx = incr(mx, 0, maxx)
    }
    maxx = incr(maxx, 4, 16);
  }
}

