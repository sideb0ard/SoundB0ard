# let iknow = loop(voices/IKNOW.wav); set iknow:len 4
# p2 < osc 8 "0 1" "send(1, iknow, %)"
# p3 < osc 5 "0 1" "send(0, iknow, %)"

#let ntz = [23, 21, 34];
let ntz = [55, 54, 47];


let fade_fn = fn(sg)
{
  p99 < over 8 "1 0" "vol " +  sg + " %";
}

# cb = BLELL // MFFF // scicczr // TINPAN
let mamwblah_gen = gen()
{
  setup()
  {
    let bs = rand_array(16, 0, 1);
    let ix = 0;
    let imax = 4;
    let d = 150;
    let nx = 0;
  }
  run()
  {

    if (count % 3 == 0) {
      set iknow:stutter;
    }
    if (count % 4 == 0) {
      set iknow:scramble;
    }

    if (count % 4 < 3) {
      let mel = combinor(bs, down(notes_in_chord(ntz[nx]), 12));
      if (count % 4 == 3) {
        mel = combinor(bs, notes_in_chord(ntz[nx]));
      }
      if (count % 16 == 13) {
        mel = combinor(bs, down(notes_in_chord(ntz[nx]), 24));
      }
      nx = incr(nx, 0, len(ntz));
      for (i = 0; i < 16; ++i) {
        stepper(cb, mel, i, ix, d);
        ix = incr(ix, 0, imax);
        d = d + 30;
        if (d > 700){
          d = 150;
        }
      }
      imax = incr(imax, 3, 16);
    }

    if (count % 12 == 0) {
      bs = rand_array(16, 0, 1);
    }
  }
}

# let ab1 = loop(JUNALGOGZ/auchBEa2.wav); set ab1:len 2; xassign(0, ab1);
# let ab2 = loop(JUNALGOGZ/auchRBE3.wav); xassign(1, ab2); p4 $ wwblah_gen
let wwblah_gen = gen()
{
  setup()
  {
    let numsixteenth = 32;
    let sixteenthcount = 0;
  }
  run()
  {
    if (count % 8 == 6) {
      set ab1:scramble 1;
    } else {
      if (count % 5 == 3) {
        set ab2:scramble 1;
      }
    }

    if (count % 4 == 3) {
      set ab1:stutter 1;
      set ab2:stutter 1;
    }
  }
}

# cut -- ab2 --
# let bt = loop(JUNALGOGZ/craklBEAT.wav); send(2, bt, 1);
# ^ send(2, bt, 1)


# per1 = drum(); Srqttx
# per2 = HIGHWR

# p3 $ ddxblah_gen; vol cb 0
let ddxblah_gen = gen()
{
  setup()
  {
    let t = 47705;
    let p = bits( ((t/4)>>(t/4))>>(t>>(t/8))|t>>2);
    let mx = 0;
    let maxx = 4;
  }
  run()
  {
    if (count % 8 == 0) {
      # let p = bits( (6473<<t^13) * 14 & t);
      # let p = bits( t<<((t>>1|t>>8)^(t>>13)) );
      p = bits( ((t/4)>>(t/4))>>(t>>(t/8))|t>>2);
      ++t;
    }
    if (count % 4 == 2) {
      for (i = 0; i < 16; ++i) {
        stepper(per1, combinor(p, down(ntz, 12)), mx, i, 400);
        mx = incr(mx, 0, maxx)
      }
    }
    for (i = 0; i < 16; ++i) {
      stepper(per2, combinor(invert(p), ntz), mx, i, 400);
      mx = incr(mx, 0, maxx)
    }
    maxx = incr(maxx, 4, 16);
  }
}
# bring back -- ab2 --

# vol ab1 0; vol ab2 0; vol bt 0



# let delz = loop(JUNALGOGZ/DELAz.wav); set delz:len 2; vol bt 1;
let delblah_gen = gen()
{
  setup()
  {
  }
  run()
  {
    if (count % 3 == 0) {
      set delz:scramble 1;
      #set delz:reverse 1;
    }
    if (count % 4 == 0) {
      set delz:stutter 1;
    }
    unsolo();
    if (count % 8 == 7) {
      solo(delz) at=8*pp;
    }
  }
}

