let PATLEN = 24;
let PP = 3840 / PATLEN;
let beat = rand_array(PATLEN, 0, 1);

let update_patlen = fn(val)
{
  PATLEN = val;
  PP = 3840 / PATLEN;
  beat = rand_array(PATLEN, 0, 1);
}


let len_gen = gen()
{
  setup()
  {
    let lenz = [16, 12, 16, 7, 11, 10, 32, 8, 12, 33, 11];
    let lx = 0;
  }
  run()
  {
      if (count % 4 == 0 && rand(100) > 80) {
        update_patlen(rand(10));
      } else {
        update_patlen(lenz[lx]);
        lx = incr(lx, 0, len(lenz));
      }
  }
}



let masklooper = fn(looper, msk)
{
  if (type(msk) != "STRING" || type(looper) != "GRANULAR") {
    return;
  }
  let bmask = string_to_mask(msk);
  let loop_on = true;
  set looper:on 1;
  for (i = 0; i < PATLEN; ++i) {
    if(bmask[i] == 1) {
      if (loop_on) {
        set looper:off 1 at=i*pp;
        loop_on = false;
      }
    } else {
      if (!loop_on) {
        loop_on = true;
        set looper:on 1 at=i*pp;
      }
    }
  }
}

# let eden = loop(legowelt/Synth-EdenHarp.wav) ; set eden:len 4; 
let stepper = fn(sg, pat, read_idx, play_idx, d)
{
  if (type(pat[read_idx]) == "ARRAY") {
    note_on_at(sg, pat[read_idx][0], play_idx * PP);
  } else {
    if (pat[read_idx] > 0) {
      let v = 100 + rand(27);
      if (play_idx % 2 == 0) {
        v = 127;
      }
      note_on_at(sg, pat[read_idx], play_idx * PP, dur = d, vel = v);
    }
  }
}

# let bl = loop(bombz/BSQ_M14.wav);
#let mablah_gen = gen()
#{
#  setup()
#  {
#    let msk = "f040";
#  }
#  run()
#  {
#    send(0, [scb, bl], 0.);
#    if (count % 4 == 3) {
#      send(0, [scb, bl], 0.2);
#    }
#    masklooper(bl, msk);
#    msk = rotate(msk, 1);
#    masklooper(scb, msk);
#  }
#}

let bd = sample(bd/jbskindakick.aiff);
let bbbd = sample(bd/808kick.aif);
let lm = sample(bd/lm1-kick.aif);
let pbd = sample(bd/pumpBD.wav);
let kbd = sample(bd/kick8.aif);
let bdz = [pbd, kbd, lm, bbbd, bd];
let bx = 0;
#let beat = bits(54574873);
let ddblah_gen = gen()
{
  setup()
  {
    #let beat = [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0];
    let sx = 0;
    let smax = PATLEN;
    let dsen = 0.1;
    #let t = 43343434;

  }
  run()
  {
    #print(beat, PATLEN);

    if (count % 8 < 7) {
      for (i = 0; i < PATLEN; ++i) {
        stepper(bdz[bx], beat, sx, i, PP);
        bx = incr(bx, 0, len(bdz));
        sx = incr(sx, 0, smax);
      }
      smax = incr(smax, 0, PATLEN);
    }
    send(0, bdz, dsen);
    send(2, bdz, dsen);
    dsen = dsen + 0.05;
    if (dsen > 0.3) {
      dsen = 0.;
    }
  }
}


let hw = sample(ht/hes23ht.aif);
let chrd = sample(legowelt/Synth-HouseChord.wav);
let th = sample(noises/thisthis.aiff);
let scr = sample(noises/scratchz.wav);
let db = sample(noises/loudDubNoise.aiff);
let jb = sample(noises/jbs3rdhit.aiff);

let noizez = [hw, chrd, th, scr, db, jb];
let wabblah_gen = gen()
{
  setup()
  {
    let bwlah  = rand_array(PATLEN, 0, len(noizez) + 3);
  }
  run()
  {
    if (count % 10 == 0) {
      bwlah  = rand_array(PATLEN, 0, len(noizez) + 3);
    }
    if (count % 2 == 0) {
      for (i = 0; i < PATLEN; ++i) {
        if (bwlah[i] < len(noizez)) {
          note_on_at(noizez[bwlah[i]], 1, i*PP*2, dur = PP/2);
        }
      }
    }
  }
}

let hh1 = sample(ch/LOUhat.aiff);
let hh2 = sample(TT-BLACKRIOT-DAYINLIFE/hh.wav);
let hh3 = sample(TT-BLACKRIOT-DAYINLIFE/hhish.wav);
let hh4 = sample(TT-LIMELIFE-RIGHTONTIME/hhh.wav);
let hh5 = sample(ch/timabHat2.aiff);
let hh6 = sample(ch/acidHat2.aiff);

let hhhblah_gen = gen()
{
  setup()
  {
    let hhz = [hh1, hh2, hh3, hh4, hh5, hh6];
    let hhx = 0;
    let hhmax = PATLEN;
    let t = 3434343;
    let pat = bits(t);
    let p = 0;
    let px = 3;
    let se = 0.1;
  }
  run()
  {
    send(0, hhz, se);
    se = se + 0.1;
    if (se > 0.4) {
      se  = 0.;
    }

    if (count % 12 == 0) {
      ++t;
      pat = bits((t>>4 & t>>8)/(t>>16&t));
    }
    for (i = 0; i < PATLEN; ++i) {
      stepper(hhz[hhx], pat , px, i, PP);
      px = incr(px, 0, pmax);
      hhx = incr(hhx, 0, len(hhz));
    }
    pmax = incr(pmax, 0, PATLEN);
  }
}

# surgefizz2
# p7 < osc 7 "34 90"  "set dx:op2out %"
# p8 < osc 11 "63 96"  "set dx:op3out %"
let root_note = 23;
let notz = [root_note];
let nx = 0;
let px = 0;
let pmax = 2;
let dxxblah_gen = gen()
{
  setup()
  {
  }
  run()
  {
    if (count % 4 < 3) {
      let pat = combinor(invert(beat), [notz[nx]]);
      for (i = 0; i < PATLEN; ++i) {
        stepper(dx, pat , px, i, PP);
        px = incr(px, 0, pmax);
      }
      pmax = incr(pmax, 2, PATLEN);
    }

    if (count % 8 == 7) {
      let pat = combinor(beat, [notz[nx]+5]);
      for (i = 0; i < PATLEN; ++i) {
        stepper(dx, pat , px, i, PP);
      }
    }
    if (count % 12 == 11) {
      let pat = combinor(beat, [notz[nx]+7]);
      for (i = 0; i < PATLEN; ++i) {
        stepper(dx, pat , px, i, PP);
      }
    }
  }
}


let moblah_gen = gen()
{
  setup()
  {
  }
  run()
  {
    if (count % 4 == 3) {
      let pat = combinor(beat, [notz[nx]]);
      for (i = 0; i < PATLEN; ++i) {
        stepper(mo, pat , px, i, PP*2);
        px = incr(px, 0, pmax);
      }
      pmax = incr(pmax, 2, PATLEN);
    }
  }
}


let now = sample(voices/readyOrNot2.wav);
let ready = sample(voices/readyornot.wav);
let yours = sample(voices/itsYoursScratch.aiff);
let drop = sample(voices/dropthebass.aiff);

let vocz = [now, ready, yours, drop];
let vx = 0;
let vocblah_gen = gen()
{
  setup()
  {
    let t = 435455;
    let d = 50;
    let sen = 0.1;
  }
  run()
  {
    if (count % 7 == 0) {
      send(1, vocz, sen);
      send(0, vocz, sen);
      sen = sen + 0.1;
      if (sen > 0.5) {
        sen = 0.1;
      }
      ++t;
      beat = bits(((t/4)>>(t/4))>>(t>>(t/8))|t>>2);
      for (i = 0; i < 16; ++i) {
        if (beat[i] == 1) {
          note_on_at(vocz[vx], 1, i*pp, dur = d);
          vx = incr(vx, 0, len(vocz)); 
          d = d + 20;
          if (d > PP) {
            d = 100;
          }
        }
      }
    }
  }
}

