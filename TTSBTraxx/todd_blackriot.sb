##let ap = sample(TT-BLACKRIOT-DAYINLIFE/ap.wav)
##vol ap 0.6
##let bd = sample(TT-BLACKRIOT-DAYINLIFE/bd.wav)
##let bd2 = sample(TT-BLACKRIOT-DAYINLIFE/bd2.wav)
##let bdf = sample(TT-BLACKRIOT-DAYINLIFE/bdflange.wav)
##let bng = sample(TT-BLACKRIOT-DAYINLIFE/bongo.wav)
##let co = sample(TT-BLACKRIOT-DAYINLIFE/crashopen.wav)
##let cp = sample(TT-BLACKRIOT-DAYINLIFE/click.wav)
##let cp2 = sample(TT-BLACKRIOT-DAYINLIFE/clipVOC.wav)
##let cp3 = sample(TT-BLACKRIOT-DAYINLIFE/cp2.wav)
##let dh = sample(TT-BLACKRIOT-DAYINLIFE/deh.wav)
##let el = sample(TT-BLACKRIOT-DAYINLIFE/endloop.wav)
##let hh = sample(TT-BLACKRIOT-DAYINLIFE/hh.wav)
##let hhs = sample(TT-BLACKRIOT-DAYINLIFE/hhish.wav)
##let ht = sample(TT-BLACKRIOT-DAYINLIFE/hateeit.wav)
##let hw = sample(TT-BLACKRIOT-DAYINLIFE/hatwump.wav)
##let il = sample(TT-BLACKRIOT-DAYINLIFE/introloop.wav)
##let kd = sample(TT-BLACKRIOT-DAYINLIFE/KDclip.wav)
##let kw = sample(TT-BLACKRIOT-DAYINLIFE/kcikWIMP.wav)
##let ll = sample(TT-BLACKRIOT-DAYINLIFE/clap.wav)
##let oh = sample(TT-BLACKRIOT-DAYINLIFE/OH.wav)
##let perc1 = sample(TT-BLACKRIOT-DAYINLIFE/perc1.wav)
##let perc2 = sample(TT-BLACKRIOT-DAYINLIFE/perc2.wav)
##let perc3 = sample(TT-BLACKRIOT-DAYINLIFE/perc3.wav)
##let scp = sample(TT-BLACKRIOT-DAYINLIFE/sncp.wav)
##let sn = sample(TT-BLACKRIOT-DAYINLIFE/sn.wav)
##let stb = sample(TT-BLACKRIOT-DAYINLIFE/stab.wav)
##let sw = sample(TT-BLACKRIOT-DAYINLIFE/snarewump.wav)
##let tic = sample(TT-BLACKRIOT-DAYINLIFE/tic.wav)
##let tom = sample(TT-BLACKRIOT-DAYINLIFE/tom.wav)
##let tom2 = sample(TT-BLACKRIOT-DAYINLIFE/tom2.wav)
##let tom3 = sample(TT-BLACKRIOT-DAYINLIFE/tom3.wav)
##let toml = sample(TT-BLACKRIOT-DAYINLIFE/tomlow.wav)
##let uh1 = sample(TT-BLACKRIOT-DAYINLIFE/UH1.wav)
##let uh2 = sample(TT-BLACKRIOT-DAYINLIFE/UH2.wav)
##let uh3 = sample(TT-BLACKRIOT-DAYINLIFE/UH3.wav)
##let wh = sample(TT-BLACKRIOT-DAYINLIFE/whistle.wav)

# p1 # ""
# p2 $ "bdf ~ ~ bd ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ "
# p3 $ "~ ~ ~ ~ sn ~ ~ ~ ~ ~ ~ ~ sw ap ~ ~ "
# p4 $ "ll ~ ~ cp2 ~ ~ oh ~ ~ ~ hh ~ ~ ll ~ ~"
# p5 < osc 16 "0 0.3"  "vol stl %"
# p6 $ "stb ~ ~ dh ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ " |  | mask "f000"
# p7 < osc 12 "0 0.3"  "vol endl %"
# p8 < every 4 "<1 2 0.5 4>"  "set endl:len %"
# p9 $ "uh3 ~ ~ uh2 ~ ~ uh3 ~ ~ ~ uh2 ~ uh3 ~ ~ ~" | mask "ff00"

let gpat = ""

let sngen = gen()
{
    setup()
    { 
       #let sampz = ["sn"]
       let sampz = ["sn", "ap", "cp", "cp2", "scp", "ht", "stb", "uh1"]
       let samp_len = 2
       let samp_idx = 0
       let count = 0
    }

    run()
    {
      let pat = ""
      let hit_count = 0;
      for (i = 0; i < len(gpat); ++i) {
         if (gpat[i] == "1" || gpat[i] == "~") {
           if (hit_count > 11 && gpat[i] == "~") {
              pat = pat + sampz[samp_idx] + " "
              samp_idx = incr(samp_idx, 0, samp_len);
            }       
            else {
              pat = pat + "~ "
            }
         ++hit_count
         } 
      }

      ++count
      samp_len = incr(samp_len, 2, len(sampz)+1)
      return pat
    }
}


let perc = gen()
{
    setup()
    { 
       let sampz = ["perc3", "perc2", "perc1"]
       #let sampz = ["oh", "hh", "ll", "cp2"]
       #let sampz = ["oh", "hh", "ll", "ht", "cp"]
       let samp_idx = 0
       let multi = ["3", "2", "4"]
       let multi_idx = 0
       let count = 0
    }

    run()
    {
      let pat = ""
      
      let rhythm = distrhythms()
      for (i = 0; i < len(rhythm); ++i) {
         if (rhythm[i] == "1") {
           pat = pat + sampz[samp_idx]
           samp_idx = incr(samp_idx, 0, len(sampz))
         } else {
            pat = pat + rhythm[i]
         } 
      }
      if (count % 8 == 0) {
        pat = "[" + pat + "]*" + multi[multi_idx]
      }

      ++count
      multi_idx = incr(multi_idx, 0, len(multi))

      return pat
    }
}

let uhz = gen()
{
    setup()
    { 
       let sampz = ["uh3", "uh2"]
       let samp_idx = 0
       let samp_len = 2
       let count = 0
    }

    run()
    {
      let pat = ""
      let hit_count = 0;
      for (i = 0; i < len(gpat); ++i) {
         if (gpat[i] == "1" || gpat[i] == "~") {
           if (hit_count > 7 && hit_count < 12 && gpat[i] == "~") {
              pat = pat + sampz[samp_idx] + " "
              samp_idx = incr(samp_idx, 0, samp_len);
            }       
            else {
              pat = pat + "~ "
            }
         ++hit_count
         } 
      }

      ++count
      samp_len = incr(samp_len, 2, len(sampz)+1)
      return pat
    }
}

let patgen = gen()
{
    setup()
    { 
       let count = 0
       let chance = [90, 0, 0, 30,    0, 10, 20, 0,   0, 0, 70, 0,   0, 0, 10, 10]
    }

    run()
    {
      let mypat = ""
      for (i = 0; i < len(chance); ++i) {
         let randy = rand(100);
         if (chance[i] > randy) {
           mypat = mypat + "1 "
         } else {
           mypat = mypat + "~ "
         } 
      }
      if ( count % 8 == 0 ) {
        mypat = "[" + mypat + "]*2"
      } 

      gpat = mypat
      ++count
    }
}

let perczy = gen()
{
    setup()
    { 
       let count = 0
       let kickz = ["bng", "stb", "dh"]
       # let kickz = ["bd2", "bdf", "bd", "kd"]
       let kick_idx = 0
    }

    run()
    {
      let pat = ""
      let lpat = gpat
      # if (count % 4 == 0) {
      #   lpat = rotate(lpat, 16);
      # }

      # }
      for (i = 0; i < len(gpat); ++i) {
         if (lpat[i] == "1") {
           pat = pat + kickz[kick_idx]
           kick_idx = incr(kick_idx, 0, len(kickz))
         } else {
            pat = pat + lpat[i]
         } 
      }

      ++count
      return pat
    }
}


let kickz = gen()
{
    setup()
    { 
       let count = 0
       let kickz = ["bd2", "bdf", "bd", "kd"]
       # let kickz = ["bd2", "bdf", "bd", "kd"]
       let kick_idx = 0
       let pat = ""
       let multi = ["2", "3"]
       let multi_idx = 0
    }

    run()
    {
      if (count % 2 == 0) {
        pat = ""
        for (i = 0; i < len(gpat); ++i) {
           if (gpat[i] == "1") {
             pat = pat + kickz[kick_idx]
             kick_idx = incr(kick_idx, 0, len(kickz))
           } else {
              pat = pat + gpat[i]
           } 
        }
      }
      if (count % 5 == 0) {
        pat = "[" + pat + "]*" + multi[multi_idx]
        multi_idx = incr(multi_idx, 0 , len (multi))
      }

      ++count
      return pat
    }
}

let rhythms = [
  #shiko
  "1 ~ ~ ~ 1 ~ 1 ~ ~ ~ 1 ~ 1 ~ ~ ~",
  #son
  "1 ~ ~ 1 ~ ~ 1 ~ ~ ~ 1 ~ 1 ~ ~ ~",
  #rumba
  "1 ~ ~ 1 ~ ~ ~ 1 ~ ~ 1 ~ 1 ~ ~ ~",
  #soukous
  "1 ~ ~ 1 ~ ~ 1 ~ ~ ~ 1 1 ~ ~ ~ ~",
  #gahu
  "1 ~ ~ 1 ~ ~ 1 ~ ~ ~ 1 ~ ~ ~ 1 ~",
  #bossa-nova
  "1 ~ ~ 1 ~ ~ 1 ~ ~ ~ 1 ~ ~ 1 ~ ~"
]

let distrhythms = gen()
{
  setup() {}

  run() {
    let idx = rand(len(rhythms))
    #puts("IDX is ", idx, " - pattern is: ", rhythms[idx])
    return rhythms[idx]
  }
}
