# let kd = sample(TT-BLACKRIOT-DAYINLIFE/KDclip.wav)
# let bdf = sample(TT-BLACKRIOT-DAYINLIFE/bdflange.wav)
# let kdw = sample(TT-BLACKRIOT-DAYINLIFE/kcikWIMP.wav)
# let he = sample(TT-BLACKRIOT-DAYINLIFE/hateeit.wav)
# let sn = sample(TT-BLACKRIOT-WARLOCK/snclean.wav)
# let pi1 = sample(TT-BLACKRIOT-WARLOCK/piano1.wav)
# let pi2 = sample(TT-BLACKRIOT-WARLOCK/piano2.wav)
# let pi3 = sample(TT-BLACKRIOT-WARLOCK/piano3.wav)
# let pi4 = sample(TT-BLACKRIOT-WARLOCK/piano4.wav)
# let stb = sample(TT-BLACKRIOT-DAYINLIFE/stab.wav)

let pat_lengthz = [7, 5, 4, 8, 3, 12, 8, 4, 7, 6];
let pat_lengthz_idx = 0;

let mapr = fn(sampz, arry) {
  let pat = ""
  for ( i = 0; i < len(arry); ++i) {
    if (arry[i] < len(sampz)) {
       pat = pat + sampz[arry[i]] + " ";
     }
     else { pat = pat + "~ "; }
  }
  return pat
}

let rand_filled_array = fn(sampz) {
   return rand_array(pat_lengthz[pat_lengthz_idx], 0, len(sampz) + 1);
}

let inc_len = gen()
{
  setup() {}
  run() { pat_lengthz_idx = incr(pat_lengthz_idx, 0, len(pat_lengthz)); }
}

let beatz = gen()
{
    setup() { let sampz = ["kd", "bdf", "sn", "stb"]; }
    run()
    {
       return mapr(sampz, rand_filled_array(sampz))
    }
}
let hatz = gen()
{
    setup() { let sampz = ["pi1", "pi2", "pi3", "pi4"] }
    run()
    {
       return mapr(sampz, rand_filled_array(sampz))
    }
}
