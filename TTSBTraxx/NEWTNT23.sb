# play voices/goback.aiff;
# let bc = loop(TTUnreleaseProject/bassCLAPloop.wav); set bc:len 2; add_fx(bc, "decimate");
# ^ add delay, filter and decimate

# let bet = loop(TT-LIMELIFE-RIGHTONTIME/beatloop.wav); vol bet 0;

let lenz = [2, 2, 4, 8, 3, 1, 16];
let lx = 0;

let bclah_gen = gen()
{
  setup()
  {
  }
  run()
  {
    if (count % 8 == 0) {
      set bc:plooplen lenz[lx];
      #lx = incr(lx, 0, len(lenz));
    }
    if (count % 4 == 0) {
      set bc:poffset lenz[lx];
      #lx = incr(lx, 0, len(lenz));
    }
    if (count % 7 == 0) {
      set bc:poffset 0;
      set bc:stutter 1;
    }
  }
}

# let notstay = loop(voices/notstayinghome.wav); set notstay:len 2; add_fx(notstay,"delay");
let stayblah_gen = gen()
{
  setup()
  {
  }
  run()
  {
    if (count % 4 == 0) {
      set notstay:active 1;
    }
    if (count % 7 == 0) {
      #vol notstay 0.5;
    }
    if (count % 8 == 7) {
      set bet:scramble 1;
    }
    if (count % 4 == 0) {
      set bet:stutter 1;
    }
    if (count % 16 < 4) {
      set notstay:reverse 0;
    }
    if (count % 2 == 0) {
      set notstay:on 1;
      #set bet:poffset lenz[lx];
    }
    set bet:poffset 0;
    if (count % 4 == 0) {
      set notstay:stutter 1;
    }
    if (count % 3 == 0) {
      set notstay:scramble 1;
    }
    if (count % 8 == 7) {
      set notstay:reverse 1;
      play_array(notstay, rand_beat());
    }
    set bet:plooplen lenz[lx];
    set notstay:plooplen lenz[lx];
    play_array(notstay, rand_beat());
  }
}

let plopblah_gen = gen()
{
  setup()
  {
  }
  run()
  {
    if (count % 8 == 0) {
      lx = incr(lx, 0, len(lenz));
    }
    if (count % 7 == 0) {
      lx = incr(lx, 0, len(lenz));
    }
  }
}



# let laf1 = loop(TT-BANGO/laughLOOP.wav); set laf1:len 0.5; vol laf1 0;
# let laf2 = loop(TT-BANGO/lafloop.wav); set laf2:len 0.5; vol laf2 0;
# let gol = loop(TT-BANGO/BEATLOOP.wav); vol gol 0;
let laf_gen = gen()
{
  setup()
  {
  }
  run()
  {
    #unsolo();
    if (count % 8 == 6) {
      #solo(laf1, laf2);
      set laf1:stutter 1;
      set laf2:scramble 1;
      let beat = rand_beat();
      play_array(laf1, beat);
      play_array(laf2, invert(beat));
    }

    # go easy on the gol - it takes over
    if (count % 4 == 3) {
      set gol:scramble 1;
    }
    set gol:reverse 0;
    if (count % 8 == 7) {
      set gol:reverse 1;
    }
  }
}


let ub = sample(TT-LIMELIFE-RIGHTONTIME/uhbass.wav);
let gltch = sample(TT-MAW-ALRIGHTALRIGHT/gltch.wav);
let bdf = sample(TT-BLACKRIOT-DAYINLIFE/bdflange.wav);
let cp = sample(TT-NOCERA/badum.wav);
let dddblah_gen = gen()
{
  setup()
  {
  }
  run()
  {
    dbeat(ub);
    #cbeat(bdf);
  }
}

let hh1 = sample(TT-NOCERA/tth.wav);
let tic = sample(TT-NOCERA/TICt.wav);
let hhu = sample(TT-NOCERA/hatUH.wav);
let bbbblah_gen = gen()
{
  setup()
  {
    let lenz = [4, 16, 2, 1, 2, 16, 1, 1, 8];
    let lx = 0;
    let percz  = [hh1, tic, hhu, gltch];
  }
  run()
  {
    if (count % 2 == 0) {
      perky(rand_beat(), percz);
    }
  }
}

